{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4yL5DJpoemyb"
      },
      "source": [
        "**Chapter 2 – End-to-end Machine Learning project**\n",
        "\n",
        "*Welcome to Machine Learning Housing Corp.! Your task is to predict median house values in Californian districts, given a number of features from these districts.*\n",
        "\n",
        "*This notebook contains all the sample code and solutions to the exercices in chapter 2.*"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vRTxlZSOemye"
      },
      "source": [
        "<table align=\"left\">\n",
        "  <td>\n",
        "    <a href=\"https://colab.research.google.com/github/ageron/handson-ml2/blob/master/02_end_to_end_machine_learning_project.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>\n",
        "  </td>\n",
        "  <td>\n",
        "    <a target=\"_blank\" href=\"https://kaggle.com/kernels/welcome?src=https://github.com/ageron/handson-ml2/blob/master/02_end_to_end_machine_learning_project.ipynb\"><img src=\"https://kaggle.com/static/images/open-in-kaggle.svg\" /></a>\n",
        "  </td>\n",
        "</table>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Ui6k9UbGemyf"
      },
      "source": [
        "# Setup"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_5z_blpMemyf"
      },
      "source": [
        "First, let's import a few common modules, ensure MatplotLib plots figures inline and prepare a function to save the figures. We also check that Python 3.5 or later is installed (although Python 2.x may work, it is deprecated so we strongly recommend you use Python 3 instead), as well as Scikit-Learn ≥0.20."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "YSToUT67emyg"
      },
      "outputs": [],
      "source": [
        "# Python ≥3.5 is required\n",
        "import sys\n",
        "assert sys.version_info >= (3, 5)\n",
        "\n",
        "# Scikit-Learn ≥0.20 is required\n",
        "import sklearn\n",
        "assert sklearn.__version__ >= \"0.20\"\n",
        "\n",
        "# Common imports\n",
        "import numpy as np\n",
        "import os\n",
        "\n",
        "# To plot pretty figures\n",
        "%matplotlib inline\n",
        "import matplotlib as mpl\n",
        "import matplotlib.pyplot as plt\n",
        "mpl.rc('axes', labelsize=14)\n",
        "mpl.rc('xtick', labelsize=12)\n",
        "mpl.rc('ytick', labelsize=12)\n",
        "\n",
        "# Where to save the figures\n",
        "PROJECT_ROOT_DIR = \".\"\n",
        "CHAPTER_ID = \"end_to_end_project\"\n",
        "IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, \"images\", CHAPTER_ID)\n",
        "os.makedirs(IMAGES_PATH, exist_ok=True)\n",
        "\n",
        "def save_fig(fig_id, tight_layout=True, fig_extension=\"png\", resolution=300):\n",
        "    path = os.path.join(IMAGES_PATH, fig_id + \".\" + fig_extension)\n",
        "    print(\"Saving figure\", fig_id)\n",
        "    if tight_layout:\n",
        "        plt.tight_layout()\n",
        "    plt.savefig(path, format=fig_extension, dpi=resolution)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GJHZS8oqemyh"
      },
      "source": [
        "## Download the Data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "ycUkeePzemyi"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import tarfile\n",
        "import urllib.request\n",
        "import pandas as pd\n",
        "\n",
        "df=pd.read_csv(\"case_study_data.csv\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1OBDN6Kdemyj"
      },
      "source": [
        "## Take a Quick Look at the Data Structure"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "0hwQg1Xfemyj",
        "outputId": "c8945092-5479-4c7b-f95f-757a98912c74"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "0   28.767169  161.966498   81.872549   99.835205  269.739988  203.647127   \n",
              "1  218.938143  119.791942  167.343711  193.325205  -79.015534   53.199300   \n",
              "2   73.635323  221.318585   99.913021  -22.305286  228.404987  111.664161   \n",
              "3  254.599403    9.245377  151.656239   93.377091  -31.668459   92.511416   \n",
              "4  290.040861  161.374547   70.177088   74.350879  230.188671  230.777534   \n",
              "\n",
              "    feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "0  249.435960  117.578044  127.856154  111.061091  126.024153  177.980983   \n",
              "1  146.831591  122.634255   73.221506   79.423254  110.618714  -23.065378   \n",
              "2  257.811522   59.378286   61.426489   86.798618   45.785137   78.697077   \n",
              "3  198.598885   66.328654  232.164797  215.983485  192.334588  266.697438   \n",
              "4  251.258058  183.337692  240.107252  278.940438  183.484400  137.560854   \n",
              "\n",
              "   feature_13  feature_14  feature_15      target cat_feature_1 cat_feature_2  \n",
              "0  152.021918  319.135333  140.016792  112.977020          High    Category_A  \n",
              "1  133.769639  273.784216   60.854829  105.844625           Low    Category_A  \n",
              "2  196.370792   -2.577077  -22.645914   93.708970           Low    Category_B  \n",
              "3  147.023177  170.750747  105.240839  115.455498           Low    Category_A  \n",
              "4  169.524114  172.233807    0.996204  187.083308          High    Category_C  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-430871a0-e534-4fbb-8dab-6e14efc5c2fd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>28.767169</td>\n",
              "      <td>161.966498</td>\n",
              "      <td>81.872549</td>\n",
              "      <td>99.835205</td>\n",
              "      <td>269.739988</td>\n",
              "      <td>203.647127</td>\n",
              "      <td>249.435960</td>\n",
              "      <td>117.578044</td>\n",
              "      <td>127.856154</td>\n",
              "      <td>111.061091</td>\n",
              "      <td>126.024153</td>\n",
              "      <td>177.980983</td>\n",
              "      <td>152.021918</td>\n",
              "      <td>319.135333</td>\n",
              "      <td>140.016792</td>\n",
              "      <td>112.977020</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>218.938143</td>\n",
              "      <td>119.791942</td>\n",
              "      <td>167.343711</td>\n",
              "      <td>193.325205</td>\n",
              "      <td>-79.015534</td>\n",
              "      <td>53.199300</td>\n",
              "      <td>146.831591</td>\n",
              "      <td>122.634255</td>\n",
              "      <td>73.221506</td>\n",
              "      <td>79.423254</td>\n",
              "      <td>110.618714</td>\n",
              "      <td>-23.065378</td>\n",
              "      <td>133.769639</td>\n",
              "      <td>273.784216</td>\n",
              "      <td>60.854829</td>\n",
              "      <td>105.844625</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>73.635323</td>\n",
              "      <td>221.318585</td>\n",
              "      <td>99.913021</td>\n",
              "      <td>-22.305286</td>\n",
              "      <td>228.404987</td>\n",
              "      <td>111.664161</td>\n",
              "      <td>257.811522</td>\n",
              "      <td>59.378286</td>\n",
              "      <td>61.426489</td>\n",
              "      <td>86.798618</td>\n",
              "      <td>45.785137</td>\n",
              "      <td>78.697077</td>\n",
              "      <td>196.370792</td>\n",
              "      <td>-2.577077</td>\n",
              "      <td>-22.645914</td>\n",
              "      <td>93.708970</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>254.599403</td>\n",
              "      <td>9.245377</td>\n",
              "      <td>151.656239</td>\n",
              "      <td>93.377091</td>\n",
              "      <td>-31.668459</td>\n",
              "      <td>92.511416</td>\n",
              "      <td>198.598885</td>\n",
              "      <td>66.328654</td>\n",
              "      <td>232.164797</td>\n",
              "      <td>215.983485</td>\n",
              "      <td>192.334588</td>\n",
              "      <td>266.697438</td>\n",
              "      <td>147.023177</td>\n",
              "      <td>170.750747</td>\n",
              "      <td>105.240839</td>\n",
              "      <td>115.455498</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>290.040861</td>\n",
              "      <td>161.374547</td>\n",
              "      <td>70.177088</td>\n",
              "      <td>74.350879</td>\n",
              "      <td>230.188671</td>\n",
              "      <td>230.777534</td>\n",
              "      <td>251.258058</td>\n",
              "      <td>183.337692</td>\n",
              "      <td>240.107252</td>\n",
              "      <td>278.940438</td>\n",
              "      <td>183.484400</td>\n",
              "      <td>137.560854</td>\n",
              "      <td>169.524114</td>\n",
              "      <td>172.233807</td>\n",
              "      <td>0.996204</td>\n",
              "      <td>187.083308</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-430871a0-e534-4fbb-8dab-6e14efc5c2fd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-430871a0-e534-4fbb-8dab-6e14efc5c2fd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-430871a0-e534-4fbb-8dab-6e14efc5c2fd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-440c7eca-e2db-4917-b8ce-c501d5bb7684\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-440c7eca-e2db-4917-b8ce-c501d5bb7684')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-440c7eca-e2db-4917-b8ce-c501d5bb7684 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 100000,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.15929979388022,\n        \"min\": -305.8618384372696,\n        \"max\": 661.8144366198912,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          152.57542553603906,\n          46.82728160630206,\n          6.208227519300223\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.86955642734542,\n        \"min\": -318.7473398622218,\n        \"max\": 601.4967754247664,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          307.6297422664673,\n          -41.16969521947722,\n          242.24025359769135\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.41494106968982,\n        \"min\": -350.2186072498203,\n        \"max\": 627.201626938517,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          311.258911745618,\n          104.36543647028525,\n          13.623688578341202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.03844153248845,\n        \"min\": -375.7316883836661,\n        \"max\": 563.464862432518,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          234.4625999614787,\n          -79.32962100764935,\n          49.90473701662868\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.51165499866633,\n        \"min\": -330.0345396349738,\n        \"max\": 725.4186856246831,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          273.9807149150271,\n          86.6382911323233,\n          180.49827498881317\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.20708146080493,\n        \"min\": -370.8939086243959,\n        \"max\": 600.964263283489,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          66.73540962974114,\n          47.04868943399778,\n          165.8218908057715\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.66564935683418,\n        \"min\": -382.25105236914135,\n        \"max\": 651.2618688940279,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          304.9332281681719,\n          -149.81357848291196,\n          67.33412658453774\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.9060402635761,\n        \"min\": -279.5864951486513,\n        \"max\": 621.8855425175099,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          331.1959028602288,\n          130.2881356737687,\n          98.19843852491208\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.06849402501423,\n        \"min\": -352.56190944073813,\n        \"max\": 593.5972735302853,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          -58.84961154837433,\n          151.80778504161214,\n          38.8624700762173\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.79531512066232,\n        \"min\": -337.5653103034469,\n        \"max\": 612.0376582219727,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          234.40208316820184,\n          180.2548227537448,\n          191.5787985652556\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.30837455174478,\n        \"min\": -331.741616690049,\n        \"max\": 604.5558482942424,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          80.82126678661915,\n          101.24875042846568,\n          307.11082124390305\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.21265382885649,\n        \"min\": -300.45726830057066,\n        \"max\": 586.8321711532454,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          128.83644583300875,\n          163.11208824309472,\n          -59.28794066279167\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.3174395266948,\n        \"min\": -353.96690684648104,\n        \"max\": 622.6444801616124,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          132.42542070876397,\n          66.5419525260939,\n          210.79177338766613\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.51897388706033,\n        \"min\": -387.2795601107323,\n        \"max\": 627.6952217154751,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          68.71654746497319,\n          241.7500185967833,\n          216.13717006017853\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.62464825919668,\n        \"min\": -315.1210569782657,\n        \"max\": 615.1768146743362,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          269.76096732165524,\n          139.70241638937568,\n          203.40673951810007\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.611917832720245,\n        \"min\": 54.91164634203681,\n        \"max\": 265.3959729524022,\n        \"num_unique_values\": 100000,\n        \"samples\": [\n          198.00300779284737,\n          98.98692167701122,\n          107.23075920527944\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Low\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_A\",\n          \"Category_B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "df.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2K1RwXoAemyj",
        "outputId": "ca4243f4-2ce9-4813-cb6d-9f34383bff8b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<class 'pandas.core.frame.DataFrame'>\n",
            "RangeIndex: 100000 entries, 0 to 99999\n",
            "Data columns (total 18 columns):\n",
            " #   Column         Non-Null Count   Dtype  \n",
            "---  ------         --------------   -----  \n",
            " 0   feature_1      100000 non-null  float64\n",
            " 1   feature_2      100000 non-null  float64\n",
            " 2   feature_3      100000 non-null  float64\n",
            " 3   feature_4      100000 non-null  float64\n",
            " 4   feature_5      100000 non-null  float64\n",
            " 5   feature_6      100000 non-null  float64\n",
            " 6   feature_7      100000 non-null  float64\n",
            " 7   feature_8      100000 non-null  float64\n",
            " 8   feature_9      100000 non-null  float64\n",
            " 9   feature_10     100000 non-null  float64\n",
            " 10  feature_11     100000 non-null  float64\n",
            " 11  feature_12     100000 non-null  float64\n",
            " 12  feature_13     100000 non-null  float64\n",
            " 13  feature_14     100000 non-null  float64\n",
            " 14  feature_15     100000 non-null  float64\n",
            " 15  target         100000 non-null  float64\n",
            " 16  cat_feature_1  100000 non-null  object \n",
            " 17  cat_feature_2  100000 non-null  object \n",
            "dtypes: float64(16), object(2)\n",
            "memory usage: 13.7+ MB\n"
          ]
        }
      ],
      "source": [
        "df.info()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 320
        },
        "id": "8hcZgLx-emyk",
        "outputId": "1e5247e1-a568-493c-d073-1dc16b28ce09"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "           feature_1      feature_2      feature_3      feature_4  \\\n",
              "count  100000.000000  100000.000000  100000.000000  100000.000000   \n",
              "mean      158.513140     139.652162     147.180481     125.756441   \n",
              "std       114.159300     110.869556     112.414941     109.038442   \n",
              "min      -305.861838    -318.747340    -350.218607    -375.731688   \n",
              "25%        80.263711      64.589940      71.074994      51.814862   \n",
              "50%       158.074181     139.469513     146.773685     125.737233   \n",
              "75%       236.915457     214.514802     223.313605     199.445756   \n",
              "max       661.814437     601.496775     627.201627     563.464862   \n",
              "\n",
              "           feature_5      feature_6      feature_7      feature_8  \\\n",
              "count  100000.000000  100000.000000  100000.000000  100000.000000   \n",
              "mean      175.975058     128.751355     179.276970     175.801288   \n",
              "std       116.511655     109.207081     117.665649     116.906040   \n",
              "min      -330.034540    -370.893909    -382.251052    -279.586495   \n",
              "25%        96.318696      54.905107      97.796408      95.365617   \n",
              "50%       176.117789     128.862162     179.288034     175.785384   \n",
              "75%       255.506559     202.717058     260.595214     255.829105   \n",
              "max       725.418686     600.964263     651.261869     621.885543   \n",
              "\n",
              "           feature_9     feature_10     feature_11     feature_12  \\\n",
              "count  100000.000000  100000.000000  100000.000000  100000.000000   \n",
              "mean      140.617718     122.162005     126.650964     134.640968   \n",
              "std       111.068494     108.795315     109.308375     110.212654   \n",
              "min      -352.561909    -337.565310    -331.741617    -300.457268   \n",
              "25%        65.223486      49.040553      52.568078      60.191509   \n",
              "50%       140.597677     122.503276     126.997673     134.519537   \n",
              "75%       215.780017     195.912092     200.908274     209.604255   \n",
              "max       593.597274     612.037658     604.555848     586.832171   \n",
              "\n",
              "          feature_13     feature_14     feature_15         target  \n",
              "count  100000.000000  100000.000000  100000.000000  100000.000000  \n",
              "mean      166.591469     143.979338     166.775811     149.968626  \n",
              "std       115.317440     111.518974     115.624648      51.611918  \n",
              "min      -353.966907    -387.279560    -315.121057      54.911646  \n",
              "25%        87.922864      68.717045      88.251705      99.923870  \n",
              "50%       166.086096     143.524532     166.639325     137.634124  \n",
              "75%       245.594763     219.864692     246.121719     199.998115  \n",
              "max       622.644480     627.695222     615.176815     265.395973  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-7e9ff5a7-b928-4c61-9f8b-bbe678891fcd\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "      <td>100000.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>158.513140</td>\n",
              "      <td>139.652162</td>\n",
              "      <td>147.180481</td>\n",
              "      <td>125.756441</td>\n",
              "      <td>175.975058</td>\n",
              "      <td>128.751355</td>\n",
              "      <td>179.276970</td>\n",
              "      <td>175.801288</td>\n",
              "      <td>140.617718</td>\n",
              "      <td>122.162005</td>\n",
              "      <td>126.650964</td>\n",
              "      <td>134.640968</td>\n",
              "      <td>166.591469</td>\n",
              "      <td>143.979338</td>\n",
              "      <td>166.775811</td>\n",
              "      <td>149.968626</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>std</th>\n",
              "      <td>114.159300</td>\n",
              "      <td>110.869556</td>\n",
              "      <td>112.414941</td>\n",
              "      <td>109.038442</td>\n",
              "      <td>116.511655</td>\n",
              "      <td>109.207081</td>\n",
              "      <td>117.665649</td>\n",
              "      <td>116.906040</td>\n",
              "      <td>111.068494</td>\n",
              "      <td>108.795315</td>\n",
              "      <td>109.308375</td>\n",
              "      <td>110.212654</td>\n",
              "      <td>115.317440</td>\n",
              "      <td>111.518974</td>\n",
              "      <td>115.624648</td>\n",
              "      <td>51.611918</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>min</th>\n",
              "      <td>-305.861838</td>\n",
              "      <td>-318.747340</td>\n",
              "      <td>-350.218607</td>\n",
              "      <td>-375.731688</td>\n",
              "      <td>-330.034540</td>\n",
              "      <td>-370.893909</td>\n",
              "      <td>-382.251052</td>\n",
              "      <td>-279.586495</td>\n",
              "      <td>-352.561909</td>\n",
              "      <td>-337.565310</td>\n",
              "      <td>-331.741617</td>\n",
              "      <td>-300.457268</td>\n",
              "      <td>-353.966907</td>\n",
              "      <td>-387.279560</td>\n",
              "      <td>-315.121057</td>\n",
              "      <td>54.911646</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>25%</th>\n",
              "      <td>80.263711</td>\n",
              "      <td>64.589940</td>\n",
              "      <td>71.074994</td>\n",
              "      <td>51.814862</td>\n",
              "      <td>96.318696</td>\n",
              "      <td>54.905107</td>\n",
              "      <td>97.796408</td>\n",
              "      <td>95.365617</td>\n",
              "      <td>65.223486</td>\n",
              "      <td>49.040553</td>\n",
              "      <td>52.568078</td>\n",
              "      <td>60.191509</td>\n",
              "      <td>87.922864</td>\n",
              "      <td>68.717045</td>\n",
              "      <td>88.251705</td>\n",
              "      <td>99.923870</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>50%</th>\n",
              "      <td>158.074181</td>\n",
              "      <td>139.469513</td>\n",
              "      <td>146.773685</td>\n",
              "      <td>125.737233</td>\n",
              "      <td>176.117789</td>\n",
              "      <td>128.862162</td>\n",
              "      <td>179.288034</td>\n",
              "      <td>175.785384</td>\n",
              "      <td>140.597677</td>\n",
              "      <td>122.503276</td>\n",
              "      <td>126.997673</td>\n",
              "      <td>134.519537</td>\n",
              "      <td>166.086096</td>\n",
              "      <td>143.524532</td>\n",
              "      <td>166.639325</td>\n",
              "      <td>137.634124</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>75%</th>\n",
              "      <td>236.915457</td>\n",
              "      <td>214.514802</td>\n",
              "      <td>223.313605</td>\n",
              "      <td>199.445756</td>\n",
              "      <td>255.506559</td>\n",
              "      <td>202.717058</td>\n",
              "      <td>260.595214</td>\n",
              "      <td>255.829105</td>\n",
              "      <td>215.780017</td>\n",
              "      <td>195.912092</td>\n",
              "      <td>200.908274</td>\n",
              "      <td>209.604255</td>\n",
              "      <td>245.594763</td>\n",
              "      <td>219.864692</td>\n",
              "      <td>246.121719</td>\n",
              "      <td>199.998115</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>max</th>\n",
              "      <td>661.814437</td>\n",
              "      <td>601.496775</td>\n",
              "      <td>627.201627</td>\n",
              "      <td>563.464862</td>\n",
              "      <td>725.418686</td>\n",
              "      <td>600.964263</td>\n",
              "      <td>651.261869</td>\n",
              "      <td>621.885543</td>\n",
              "      <td>593.597274</td>\n",
              "      <td>612.037658</td>\n",
              "      <td>604.555848</td>\n",
              "      <td>586.832171</td>\n",
              "      <td>622.644480</td>\n",
              "      <td>627.695222</td>\n",
              "      <td>615.176815</td>\n",
              "      <td>265.395973</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-7e9ff5a7-b928-4c61-9f8b-bbe678891fcd')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-7e9ff5a7-b928-4c61-9f8b-bbe678891fcd button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-7e9ff5a7-b928-4c61-9f8b-bbe678891fcd');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d3c68ab7-3fdb-42af-8229-7071b4f53062\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d3c68ab7-3fdb-42af-8229-7071b4f53062')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d3c68ab7-3fdb-42af-8229-7071b4f53062 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "summary": "{\n  \"name\": \"df\",\n  \"rows\": 8,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35300.56249875314,\n        \"min\": -305.8618384372696,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          158.51314036960383,\n          158.07418130071756,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35308.14444045184,\n        \"min\": -318.7473398622218,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          139.6521624506939,\n          139.46951306200987,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35306.94747908579,\n        \"min\": -350.2186072498203,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          147.18048106672703,\n          146.7736849569071,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35315.873791044294,\n        \"min\": -375.7316883836661,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          125.75644076561142,\n          125.73723284137549,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35295.093047514914,\n        \"min\": -330.0345396349738,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          175.9750576653146,\n          176.11778926139482,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35313.157878880025,\n        \"min\": -370.8939086243959,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          128.7513546650915,\n          128.86216172306027,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35300.7138404125,\n        \"min\": -382.25105236914135,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          179.27696999501998,\n          179.2880338706599,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35297.50393521862,\n        \"min\": -279.5864951486513,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          175.80128766371928,\n          175.78538405686172,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35310.08917496877,\n        \"min\": -352.56190944073813,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          140.61771826878572,\n          140.59767745403008,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35312.18671280134,\n        \"min\": -337.5653103034469,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          122.16200542923694,\n          122.50327632572758,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35311.33518930528,\n        \"min\": -331.741616690049,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          126.65096352771465,\n          126.99767279819145,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35308.907360840654,\n        \"min\": -300.45726830057066,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          134.640968097882,\n          134.51953746930687,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35303.292124530584,\n        \"min\": -353.96690684648104,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          166.5914687087202,\n          166.08609556828793,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35309.534641793194,\n        \"min\": -387.2795601107323,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          143.97933817164332,\n          143.52453155352265,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35301.520804281696,\n        \"min\": -315.1210569782657,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          166.77581103413473,\n          166.6393252810185,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35306.95269125006,\n        \"min\": 51.611917832720245,\n        \"max\": 100000.0,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          149.96862649973704,\n          137.63412448424907,\n          100000.0\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "df.describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 178
        },
        "id": "dSLi2wgQemyk",
        "outputId": "3d638d6b-ef01-4dd8-aa1d-1f15909d2c19"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cat_feature_1\n",
              "High    50017\n",
              "Low     49983\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>High</th>\n",
              "      <td>50017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Low</th>\n",
              "      <td>49983</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "df[\"cat_feature_1\"].value_counts()"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df[\"cat_feature_2\"].value_counts()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 209
        },
        "id": "-74w8EBXghg9",
        "outputId": "d804d4af-60d3-40a3-f13a-b934827a50ee"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cat_feature_2\n",
              "Category_A    46440\n",
              "Category_C    43398\n",
              "Category_B    10162\n",
              "Name: count, dtype: int64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>count</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat_feature_2</th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>Category_A</th>\n",
              "      <td>46440</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Category_C</th>\n",
              "      <td>43398</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>Category_B</th>\n",
              "      <td>10162</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> int64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 916
        },
        "id": "Y_JDQLMdemyk",
        "outputId": "ea7bbb4b-8ef1-4093-d8d7-142b18e207d7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving figure attribute_histogram_plots\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 2000x1500 with 16 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "%matplotlib inline\n",
        "import matplotlib.pyplot as plt\n",
        "df.hist(bins=50, figsize=(20,15))\n",
        "save_fig(\"attribute_histogram_plots\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DJM2lwh6emyk"
      },
      "source": [
        "## Create a Test Set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "J41Wq1W6emyk"
      },
      "outputs": [],
      "source": [
        "# to make this notebook's output identical at every run\n",
        "np.random.seed(42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "00KXuhssemyk"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "\n",
        "# For illustration only. Sklearn has train_test_split()\n",
        "def split_train_test(data, test_ratio):\n",
        "    shuffled_indices = np.random.permutation(len(data))\n",
        "    test_set_size = int(len(data) * test_ratio)\n",
        "    test_indices = shuffled_indices[:test_set_size]\n",
        "    train_indices = shuffled_indices[test_set_size:]\n",
        "    return data.iloc[train_indices], data.iloc[test_indices]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 13,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3hzaHsK5emyk",
        "outputId": "d2191608-ebaf-41be-b2c1-00f22497459d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "80000"
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ],
      "source": [
        "train_set, test_set = split_train_test(df, 0.2)\n",
        "len(train_set)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "uXzbK9-4emyl",
        "outputId": "f703a970-e6ca-44d5-9a99-106b33be7627"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "20000"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "len(test_set)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "stHmGOGIemyl",
        "outputId": "dfe43871-181e-4aed-d618-a8b02c4ece55"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "75721  152.575426  307.629742  311.258912  234.462600  273.980715   66.735410   \n",
              "80184   46.827282  -41.169695  104.365436  -79.329621   86.638291   47.048689   \n",
              "19864    6.208228  242.240254   13.623689   49.904737  180.498275  165.821891   \n",
              "76699  188.755660  215.254159  263.048165  224.947729  240.354385  232.846857   \n",
              "92991  309.563703  222.417975  168.479433  142.618957   83.059737   97.465823   \n",
              "\n",
              "        feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "75721  304.933228  331.195903  -58.849612  234.402083   80.821267  128.836446   \n",
              "80184 -149.813578  130.288136  151.807785  180.254823  101.248750  163.112088   \n",
              "19864   67.334127   98.198439   38.862470  191.578799  307.110821  -59.287941   \n",
              "76699  176.157096  254.671581  115.097880  -21.862591  165.139432   94.870608   \n",
              "92991  -42.724552  139.135052  116.958956  155.900753   55.044390 -152.863502   \n",
              "\n",
              "       feature_13  feature_14  feature_15      target cat_feature_1  \\\n",
              "75721  132.425421   68.716547  269.760967  198.003008          High   \n",
              "80184   66.541953  241.750019  139.702416   98.986922           Low   \n",
              "19864  210.791773  216.137170  203.406740  107.230759          High   \n",
              "76699  137.005633  301.102203  307.785622  209.721101          High   \n",
              "92991  312.808145  -21.978821  186.236490   93.078911           Low   \n",
              "\n",
              "      cat_feature_2  \n",
              "75721    Category_C  \n",
              "80184    Category_B  \n",
              "19864    Category_A  \n",
              "76699    Category_C  \n",
              "92991    Category_B  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-efc55306-a705-435a-a740-ec0c44532c92\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>75721</th>\n",
              "      <td>152.575426</td>\n",
              "      <td>307.629742</td>\n",
              "      <td>311.258912</td>\n",
              "      <td>234.462600</td>\n",
              "      <td>273.980715</td>\n",
              "      <td>66.735410</td>\n",
              "      <td>304.933228</td>\n",
              "      <td>331.195903</td>\n",
              "      <td>-58.849612</td>\n",
              "      <td>234.402083</td>\n",
              "      <td>80.821267</td>\n",
              "      <td>128.836446</td>\n",
              "      <td>132.425421</td>\n",
              "      <td>68.716547</td>\n",
              "      <td>269.760967</td>\n",
              "      <td>198.003008</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>80184</th>\n",
              "      <td>46.827282</td>\n",
              "      <td>-41.169695</td>\n",
              "      <td>104.365436</td>\n",
              "      <td>-79.329621</td>\n",
              "      <td>86.638291</td>\n",
              "      <td>47.048689</td>\n",
              "      <td>-149.813578</td>\n",
              "      <td>130.288136</td>\n",
              "      <td>151.807785</td>\n",
              "      <td>180.254823</td>\n",
              "      <td>101.248750</td>\n",
              "      <td>163.112088</td>\n",
              "      <td>66.541953</td>\n",
              "      <td>241.750019</td>\n",
              "      <td>139.702416</td>\n",
              "      <td>98.986922</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19864</th>\n",
              "      <td>6.208228</td>\n",
              "      <td>242.240254</td>\n",
              "      <td>13.623689</td>\n",
              "      <td>49.904737</td>\n",
              "      <td>180.498275</td>\n",
              "      <td>165.821891</td>\n",
              "      <td>67.334127</td>\n",
              "      <td>98.198439</td>\n",
              "      <td>38.862470</td>\n",
              "      <td>191.578799</td>\n",
              "      <td>307.110821</td>\n",
              "      <td>-59.287941</td>\n",
              "      <td>210.791773</td>\n",
              "      <td>216.137170</td>\n",
              "      <td>203.406740</td>\n",
              "      <td>107.230759</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>76699</th>\n",
              "      <td>188.755660</td>\n",
              "      <td>215.254159</td>\n",
              "      <td>263.048165</td>\n",
              "      <td>224.947729</td>\n",
              "      <td>240.354385</td>\n",
              "      <td>232.846857</td>\n",
              "      <td>176.157096</td>\n",
              "      <td>254.671581</td>\n",
              "      <td>115.097880</td>\n",
              "      <td>-21.862591</td>\n",
              "      <td>165.139432</td>\n",
              "      <td>94.870608</td>\n",
              "      <td>137.005633</td>\n",
              "      <td>301.102203</td>\n",
              "      <td>307.785622</td>\n",
              "      <td>209.721101</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92991</th>\n",
              "      <td>309.563703</td>\n",
              "      <td>222.417975</td>\n",
              "      <td>168.479433</td>\n",
              "      <td>142.618957</td>\n",
              "      <td>83.059737</td>\n",
              "      <td>97.465823</td>\n",
              "      <td>-42.724552</td>\n",
              "      <td>139.135052</td>\n",
              "      <td>116.958956</td>\n",
              "      <td>155.900753</td>\n",
              "      <td>55.044390</td>\n",
              "      <td>-152.863502</td>\n",
              "      <td>312.808145</td>\n",
              "      <td>-21.978821</td>\n",
              "      <td>186.236490</td>\n",
              "      <td>93.078911</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-efc55306-a705-435a-a740-ec0c44532c92')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-efc55306-a705-435a-a740-ec0c44532c92 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-efc55306-a705-435a-a740-ec0c44532c92');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-c547e241-60d4-4da1-a6c7-a3dcc9a943e4\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c547e241-60d4-4da1-a6c7-a3dcc9a943e4')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-c547e241-60d4-4da1-a6c7-a3dcc9a943e4 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_set",
              "summary": "{\n  \"name\": \"test_set\",\n  \"rows\": 20000,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113.9186237795578,\n        \"min\": -231.9687230857491,\n        \"max\": 558.7635338620894,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          353.89771344723675,\n          60.84153737690429,\n          292.067932069735\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.5309922849734,\n        \"min\": -246.53707605827756,\n        \"max\": 585.8047008613287,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          207.05251873446255,\n          120.65621967379536,\n          21.36494537831399\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.44661621296461,\n        \"min\": -302.900928843206,\n        \"max\": 618.6783338645942,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          167.37763324762437,\n          253.1847495500345,\n          294.11818712355176\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.30227350917734,\n        \"min\": -335.9407751478449,\n        \"max\": 563.464862432518,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          276.9797778902158,\n          219.26924598080265,\n          147.88682977125143\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.17176199882279,\n        \"min\": -330.0345396349738,\n        \"max\": 611.9902245900273,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          274.2191176727569,\n          166.02978677162452,\n          430.27247227254384\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.70951777640543,\n        \"min\": -354.85835865898304,\n        \"max\": 547.9467396649586,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          400.6293127617734,\n          79.80888220265344,\n          151.93407785965405\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.60851493326648,\n        \"min\": -228.9732167658185,\n        \"max\": 620.6282835108404,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          192.43216000265136,\n          306.2064151910571,\n          317.165384343105\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.33222736144495,\n        \"min\": -255.53508400442365,\n        \"max\": 621.8855425175099,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          53.89762434186443,\n          364.44932782626,\n          194.30071387971137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.9799576618261,\n        \"min\": -280.5698113597251,\n        \"max\": 552.443007374805,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          284.3647446978377,\n          175.12464394553757,\n          173.24465024455964\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 107.88788248241927,\n        \"min\": -306.39741467012004,\n        \"max\": 509.7496965417562,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          292.4476291163423,\n          132.5909129741964,\n          221.2295755832089\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.8242149328538,\n        \"min\": -302.6871236451654,\n        \"max\": 508.9965924365293,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          401.1958586544989,\n          200.96735231153687,\n          103.67077714360798\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.10600350541478,\n        \"min\": -300.45726830057066,\n        \"max\": 525.1660725898342,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          77.82380331270105,\n          67.54711094481158,\n          83.16204492924373\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.57248854730436,\n        \"min\": -249.88825525095112,\n        \"max\": 599.0909625524521,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          167.40573632581834,\n          40.54258503834584,\n          170.16741617934264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.1307285228353,\n        \"min\": -251.9112617609247,\n        \"max\": 613.1095068758586,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          180.33868512978609,\n          186.96708613735467,\n          111.41433354728385\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.12472808509246,\n        \"min\": -259.5004336735513,\n        \"max\": 615.1768146743362,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          252.2804554326617,\n          254.63696359905924,\n          238.9612388739783\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.59810359614043,\n        \"min\": 60.17743547277719,\n        \"max\": 255.7841107349905,\n        \"num_unique_values\": 20000,\n        \"samples\": [\n          218.4315939277025,\n          182.9297993560949,\n          171.23204621501137\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Low\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_C\",\n          \"Category_B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 15
        }
      ],
      "source": [
        "test_set.head()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "n5MVsG6zemyl"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import train_test_split\n",
        "\n",
        "train_set, test_set = train_test_split(df, test_size=0.2, random_state=42)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "rdrP6bJcemyl",
        "outputId": "da1091ca-b7f7-42c5-ea0d-f707f178ccfd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "5647    97.894714   93.175195  231.705284  213.778612  107.764316   90.215350   \n",
              "4771   231.269391  -23.039053   60.101616  103.471705  250.694694  146.888545   \n",
              "5998   -18.610755   39.680292  152.730853   -8.233094   33.119391  -22.519979   \n",
              "19147  353.991388  224.303150  231.053965  416.983736  230.506504  234.245349   \n",
              "26218  204.959004  213.159236   28.303038  140.189928   -4.419647  -33.210162   \n",
              "\n",
              "        feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "5647   175.890945  236.457111   90.196821   39.545582  -80.670152   81.667221   \n",
              "4771   146.632787  237.837372  201.494417   90.514808  -74.841175   18.710632   \n",
              "5998   -81.667342  346.181897  193.362070  -37.878907  -92.835754  122.806081   \n",
              "19147  247.641692   76.691189  234.497782  -22.514744  182.602768  105.574278   \n",
              "26218   22.361432  142.301110  -87.044647  194.877174  -73.994029   -3.343903   \n",
              "\n",
              "       feature_13  feature_14  feature_15      target cat_feature_1  \\\n",
              "5647    44.094273  167.424668  141.561933  200.724239          High   \n",
              "4771    49.629008  -73.631593   77.782491   97.526264          High   \n",
              "5998   204.215887   25.386288  274.341117  101.042472           Low   \n",
              "19147  279.383290  310.131596  110.590823  200.776156          High   \n",
              "26218   54.288123   19.643596  244.811037   86.140498           Low   \n",
              "\n",
              "      cat_feature_2  \n",
              "5647     Category_C  \n",
              "4771     Category_A  \n",
              "5998     Category_A  \n",
              "19147    Category_C  \n",
              "26218    Category_A  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>5647</th>\n",
              "      <td>97.894714</td>\n",
              "      <td>93.175195</td>\n",
              "      <td>231.705284</td>\n",
              "      <td>213.778612</td>\n",
              "      <td>107.764316</td>\n",
              "      <td>90.215350</td>\n",
              "      <td>175.890945</td>\n",
              "      <td>236.457111</td>\n",
              "      <td>90.196821</td>\n",
              "      <td>39.545582</td>\n",
              "      <td>-80.670152</td>\n",
              "      <td>81.667221</td>\n",
              "      <td>44.094273</td>\n",
              "      <td>167.424668</td>\n",
              "      <td>141.561933</td>\n",
              "      <td>200.724239</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4771</th>\n",
              "      <td>231.269391</td>\n",
              "      <td>-23.039053</td>\n",
              "      <td>60.101616</td>\n",
              "      <td>103.471705</td>\n",
              "      <td>250.694694</td>\n",
              "      <td>146.888545</td>\n",
              "      <td>146.632787</td>\n",
              "      <td>237.837372</td>\n",
              "      <td>201.494417</td>\n",
              "      <td>90.514808</td>\n",
              "      <td>-74.841175</td>\n",
              "      <td>18.710632</td>\n",
              "      <td>49.629008</td>\n",
              "      <td>-73.631593</td>\n",
              "      <td>77.782491</td>\n",
              "      <td>97.526264</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5998</th>\n",
              "      <td>-18.610755</td>\n",
              "      <td>39.680292</td>\n",
              "      <td>152.730853</td>\n",
              "      <td>-8.233094</td>\n",
              "      <td>33.119391</td>\n",
              "      <td>-22.519979</td>\n",
              "      <td>-81.667342</td>\n",
              "      <td>346.181897</td>\n",
              "      <td>193.362070</td>\n",
              "      <td>-37.878907</td>\n",
              "      <td>-92.835754</td>\n",
              "      <td>122.806081</td>\n",
              "      <td>204.215887</td>\n",
              "      <td>25.386288</td>\n",
              "      <td>274.341117</td>\n",
              "      <td>101.042472</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19147</th>\n",
              "      <td>353.991388</td>\n",
              "      <td>224.303150</td>\n",
              "      <td>231.053965</td>\n",
              "      <td>416.983736</td>\n",
              "      <td>230.506504</td>\n",
              "      <td>234.245349</td>\n",
              "      <td>247.641692</td>\n",
              "      <td>76.691189</td>\n",
              "      <td>234.497782</td>\n",
              "      <td>-22.514744</td>\n",
              "      <td>182.602768</td>\n",
              "      <td>105.574278</td>\n",
              "      <td>279.383290</td>\n",
              "      <td>310.131596</td>\n",
              "      <td>110.590823</td>\n",
              "      <td>200.776156</td>\n",
              "      <td>High</td>\n",
              "      <td>Category_C</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>26218</th>\n",
              "      <td>204.959004</td>\n",
              "      <td>213.159236</td>\n",
              "      <td>28.303038</td>\n",
              "      <td>140.189928</td>\n",
              "      <td>-4.419647</td>\n",
              "      <td>-33.210162</td>\n",
              "      <td>22.361432</td>\n",
              "      <td>142.301110</td>\n",
              "      <td>-87.044647</td>\n",
              "      <td>194.877174</td>\n",
              "      <td>-73.994029</td>\n",
              "      <td>-3.343903</td>\n",
              "      <td>54.288123</td>\n",
              "      <td>19.643596</td>\n",
              "      <td>244.811037</td>\n",
              "      <td>86.140498</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-ee9f7da9-8b1b-4144-8e4b-58f9db2c728c');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e56488c2-6e9d-417e-850d-a26e03f324ff\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e56488c2-6e9d-417e-850d-a26e03f324ff')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e56488c2-6e9d-417e-850d-a26e03f324ff button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "test_set",
              "summary": "{\n  \"name\": \"test_set\",\n  \"rows\": 5367,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113.78556584567318,\n        \"min\": -259.29488474573725,\n        \"max\": 544.7514747393913,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          -12.182616391099288,\n          473.26751356003126,\n          45.25967843685456\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.61854152334054,\n        \"min\": -221.17284012899395,\n        \"max\": 531.8288152656306,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          79.9648570472715,\n          152.79414148035497,\n          113.21519729460496\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.34761130669128,\n        \"min\": -230.4198131021404,\n        \"max\": 532.0368551968519,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          313.5662273517594,\n          231.20733932217237,\n          190.58021947536892\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.66801177847476,\n        \"min\": -256.7407603504631,\n        \"max\": 510.3673717748426,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          217.8320706109186,\n          238.49837773513835,\n          -3.485623447265638\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 113.19223045692752,\n        \"min\": -330.0345396349738,\n        \"max\": 576.2925623597388,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          135.0264160635526,\n          151.62433137316324,\n          266.2985702297356\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.70395677406741,\n        \"min\": -238.55738332139669,\n        \"max\": 547.9467396649586,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          -9.645137396001104,\n          58.94991270423472,\n          72.21908890522029\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 118.5891338627259,\n        \"min\": -222.64935693585085,\n        \"max\": 620.6282835108404,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          256.99713243164393,\n          427.368592850102,\n          213.14162896139325\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.90597896630979,\n        \"min\": -227.8739932049713,\n        \"max\": 585.3626043486686,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          60.49224047157142,\n          131.3104086900384,\n          264.1510227086202\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.73935616223524,\n        \"min\": -258.21781030618433,\n        \"max\": 521.0371214210212,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          75.81467943373896,\n          248.6256509460586,\n          177.06766090377795\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.9976747316514,\n        \"min\": -315.1360150485736,\n        \"max\": 499.3513892381234,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          -35.634626164287766,\n          103.65040871830602,\n          37.755704594765184\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.16434046822604,\n        \"min\": -299.32274077733257,\n        \"max\": 515.8246216336861,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          152.16005195936998,\n          279.6572826331239,\n          176.20391718978237\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.81421475875683,\n        \"min\": -281.0265054167796,\n        \"max\": 542.1741983019343,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          56.67605214605716,\n          139.40546578191865,\n          -9.513482116889264\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.19091481257398,\n        \"min\": -233.2226983218936,\n        \"max\": 552.9553604330636,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          158.88363258588535,\n          169.80454136405373,\n          -2.10953409207886\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.07106698425632,\n        \"min\": -233.3490132714025,\n        \"max\": 572.743371208262,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          215.30353892541672,\n          84.13448832384373,\n          124.736161084362\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.9616719902708,\n        \"min\": -234.8989369899677,\n        \"max\": 516.9877687686555,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          180.9391537792386,\n          287.7736292600153,\n          53.93860892990422\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.488389133462206,\n        \"min\": 64.04145191077309,\n        \"max\": 252.1401105604778,\n        \"num_unique_values\": 5367,\n        \"samples\": [\n          108.29776923473138,\n          214.0142755214784,\n          115.16800644487104\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"Low\",\n          \"High\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_C\",\n          \"Category_A\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 23
        }
      ],
      "source": [
        "test_set.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dvqiNPaTemys"
      },
      "source": [
        "# Discover and Visualize the Data to Gain Insights"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 226
        },
        "id": "jp7LiCt0emys",
        "outputId": "16486474-3da3-4dfd-bcbb-179834de0151"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "        feature_1   feature_2   feature_3   feature_4   feature_5   feature_6  \\\n",
              "75220   74.034809   89.083758   35.825583  -21.968302  230.572321  157.076578   \n",
              "48955  -59.289198   53.644242   58.606402  119.347059  123.993269   25.159090   \n",
              "44966    2.163657   53.067643   -3.113178  112.709391  167.993169  122.996469   \n",
              "13568  284.239203  184.533517   72.324016  -54.188530  235.305686  137.937061   \n",
              "92727  162.428653    5.228181  192.014417   48.615980   22.627628  -35.445375   \n",
              "\n",
              "        feature_7   feature_8   feature_9  feature_10  feature_11  feature_12  \\\n",
              "75220  235.613294  165.666649    1.160112  230.107200  255.760376   -5.326374   \n",
              "48955  111.397158  267.809264   62.589373  154.388385  -17.313058  111.371391   \n",
              "44966   67.930615   -9.733244  147.038104  -32.125058  183.005693  238.851657   \n",
              "13568  135.850959  255.999069    5.945157  258.555424  119.464784  221.696936   \n",
              "92727  101.242224   14.459083   50.333815  107.525025  140.542934  166.920342   \n",
              "\n",
              "       feature_13  feature_14  feature_15      target cat_feature_1  \\\n",
              "75220  253.840638  -93.125388  -27.580404  107.580391           Low   \n",
              "48955  125.340965  -30.122344  -11.647991   95.135450           Low   \n",
              "44966    7.661721  117.530721  131.654262   94.627740           Low   \n",
              "13568  332.359932   78.965643  156.176259  128.531620           Low   \n",
              "92727   91.729329  160.231358  110.320144  106.681663           Low   \n",
              "\n",
              "      cat_feature_2  \n",
              "75220    Category_A  \n",
              "48955    Category_A  \n",
              "44966    Category_A  \n",
              "13568    Category_B  \n",
              "92727    Category_A  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-71a7cae3-6e95-43f7-bdbb-50b89ad34814\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>feature_1</th>\n",
              "      <th>feature_2</th>\n",
              "      <th>feature_3</th>\n",
              "      <th>feature_4</th>\n",
              "      <th>feature_5</th>\n",
              "      <th>feature_6</th>\n",
              "      <th>feature_7</th>\n",
              "      <th>feature_8</th>\n",
              "      <th>feature_9</th>\n",
              "      <th>feature_10</th>\n",
              "      <th>feature_11</th>\n",
              "      <th>feature_12</th>\n",
              "      <th>feature_13</th>\n",
              "      <th>feature_14</th>\n",
              "      <th>feature_15</th>\n",
              "      <th>target</th>\n",
              "      <th>cat_feature_1</th>\n",
              "      <th>cat_feature_2</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>75220</th>\n",
              "      <td>74.034809</td>\n",
              "      <td>89.083758</td>\n",
              "      <td>35.825583</td>\n",
              "      <td>-21.968302</td>\n",
              "      <td>230.572321</td>\n",
              "      <td>157.076578</td>\n",
              "      <td>235.613294</td>\n",
              "      <td>165.666649</td>\n",
              "      <td>1.160112</td>\n",
              "      <td>230.107200</td>\n",
              "      <td>255.760376</td>\n",
              "      <td>-5.326374</td>\n",
              "      <td>253.840638</td>\n",
              "      <td>-93.125388</td>\n",
              "      <td>-27.580404</td>\n",
              "      <td>107.580391</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>48955</th>\n",
              "      <td>-59.289198</td>\n",
              "      <td>53.644242</td>\n",
              "      <td>58.606402</td>\n",
              "      <td>119.347059</td>\n",
              "      <td>123.993269</td>\n",
              "      <td>25.159090</td>\n",
              "      <td>111.397158</td>\n",
              "      <td>267.809264</td>\n",
              "      <td>62.589373</td>\n",
              "      <td>154.388385</td>\n",
              "      <td>-17.313058</td>\n",
              "      <td>111.371391</td>\n",
              "      <td>125.340965</td>\n",
              "      <td>-30.122344</td>\n",
              "      <td>-11.647991</td>\n",
              "      <td>95.135450</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>44966</th>\n",
              "      <td>2.163657</td>\n",
              "      <td>53.067643</td>\n",
              "      <td>-3.113178</td>\n",
              "      <td>112.709391</td>\n",
              "      <td>167.993169</td>\n",
              "      <td>122.996469</td>\n",
              "      <td>67.930615</td>\n",
              "      <td>-9.733244</td>\n",
              "      <td>147.038104</td>\n",
              "      <td>-32.125058</td>\n",
              "      <td>183.005693</td>\n",
              "      <td>238.851657</td>\n",
              "      <td>7.661721</td>\n",
              "      <td>117.530721</td>\n",
              "      <td>131.654262</td>\n",
              "      <td>94.627740</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13568</th>\n",
              "      <td>284.239203</td>\n",
              "      <td>184.533517</td>\n",
              "      <td>72.324016</td>\n",
              "      <td>-54.188530</td>\n",
              "      <td>235.305686</td>\n",
              "      <td>137.937061</td>\n",
              "      <td>135.850959</td>\n",
              "      <td>255.999069</td>\n",
              "      <td>5.945157</td>\n",
              "      <td>258.555424</td>\n",
              "      <td>119.464784</td>\n",
              "      <td>221.696936</td>\n",
              "      <td>332.359932</td>\n",
              "      <td>78.965643</td>\n",
              "      <td>156.176259</td>\n",
              "      <td>128.531620</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_B</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>92727</th>\n",
              "      <td>162.428653</td>\n",
              "      <td>5.228181</td>\n",
              "      <td>192.014417</td>\n",
              "      <td>48.615980</td>\n",
              "      <td>22.627628</td>\n",
              "      <td>-35.445375</td>\n",
              "      <td>101.242224</td>\n",
              "      <td>14.459083</td>\n",
              "      <td>50.333815</td>\n",
              "      <td>107.525025</td>\n",
              "      <td>140.542934</td>\n",
              "      <td>166.920342</td>\n",
              "      <td>91.729329</td>\n",
              "      <td>160.231358</td>\n",
              "      <td>110.320144</td>\n",
              "      <td>106.681663</td>\n",
              "      <td>Low</td>\n",
              "      <td>Category_A</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-71a7cae3-6e95-43f7-bdbb-50b89ad34814')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-71a7cae3-6e95-43f7-bdbb-50b89ad34814 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-71a7cae3-6e95-43f7-bdbb-50b89ad34814');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-bd439095-fb2c-42bc-a75f-8a2b1527b33e\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-bd439095-fb2c-42bc-a75f-8a2b1527b33e')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-bd439095-fb2c-42bc-a75f-8a2b1527b33e button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "dataframe",
              "variable_name": "df1",
              "summary": "{\n  \"name\": \"df1\",\n  \"rows\": 80000,\n  \"fields\": [\n    {\n      \"column\": \"feature_1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 114.21995885319845,\n        \"min\": -305.8618384372696,\n        \"max\": 661.8144366198912,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          310.3848788333779,\n          112.17275612403148,\n          33.213874006752064\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.95470828778141,\n        \"min\": -318.7473398622218,\n        \"max\": 601.4967754247664,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          207.3359107817665,\n          214.34431248177745,\n          54.02415873115278\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 112.40762874469058,\n        \"min\": -350.2186072498203,\n        \"max\": 627.201626938517,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          170.3426141692177,\n          -8.961101081154936,\n          131.8053432710094\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 108.97297977982578,\n        \"min\": -375.7316883836661,\n        \"max\": 535.616291941599,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          75.84953272644451,\n          -193.5075333164073,\n          33.86139642215096\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.34509619688112,\n        \"min\": -293.3190566608723,\n        \"max\": 725.4186856246831,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          161.8100930533817,\n          70.18620245673479,\n          -23.40765362220634\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.33115878825079,\n        \"min\": -370.8939086243959,\n        \"max\": 600.964263283489,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          196.5113616364844,\n          -52.06036345504676,\n          188.019639929644\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 117.67957690237172,\n        \"min\": -382.25105236914135,\n        \"max\": 651.2618688940279,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          321.0558247365552,\n          57.31178643341726,\n          247.6094927458317\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 116.79996879686068,\n        \"min\": -279.5864951486513,\n        \"max\": 615.1128679190401,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          182.36486813721243,\n          242.38503837921533,\n          375.3121669110536\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.0912461171753,\n        \"min\": -352.56190944073813,\n        \"max\": 593.5972735302853,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          233.39874344368283,\n          -60.07423357258814,\n          205.3448907693557\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_10\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.02155991388997,\n        \"min\": -337.5653103034469,\n        \"max\": 612.0376582219727,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          81.50373451447402,\n          202.9587157938248,\n          276.47072946785545\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_11\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 109.4292574867714,\n        \"min\": -331.741616690049,\n        \"max\": 604.5558482942424,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          71.90177386541681,\n          226.7388289937254,\n          117.64216592732453\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_12\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 110.48820059001058,\n        \"min\": -282.9272244081515,\n        \"max\": 586.8321711532454,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          147.15020853271238,\n          0.8938666129529338,\n          54.011223143881125\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_13\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.50360952840046,\n        \"min\": -353.96690684648104,\n        \"max\": 622.6444801616124,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          237.10852973163577,\n          138.00421159519735,\n          222.01232490133611\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_14\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 111.61617178609924,\n        \"min\": -387.2795601107323,\n        \"max\": 627.6952217154751,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          268.0554849489454,\n          147.0633892609685,\n          14.76130300606701\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"feature_15\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 115.49954509646112,\n        \"min\": -315.1210569782657,\n        \"max\": 597.581301388199,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          235.23742784304665,\n          190.95769498922735,\n          314.6057967820509\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 51.61518351790989,\n        \"min\": 54.91164634203681,\n        \"max\": 265.3959729524022,\n        \"num_unique_values\": 80000,\n        \"samples\": [\n          178.4604163719476,\n          96.2067634150348,\n          175.6123327860097\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_1\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"High\",\n          \"Low\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"cat_feature_2\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 3,\n        \"samples\": [\n          \"Category_A\",\n          \"Category_B\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"
            }
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "df1 = train_set.copy()\n",
        "df1.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "hDyYAlc9emyt"
      },
      "source": [
        "## Solving the 5 quesetions"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "EXhcENiZemyt",
        "outputId": "83b35895-c60a-41cd-98e5-d058ebd5207f"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'feature_7'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "df_num = df.drop([\"cat_feature_1\", \"cat_feature_2\"], axis=1)\n",
        "df_cat=df[[\"cat_feature_1\", \"cat_feature_2\"]].copy\n",
        "corr_matrix = df_num.corr()\n",
        "a=corr_matrix.sort_values(by='target', ascending=False)\n",
        "a.index[1]"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "means = df.groupby('cat_feature_2')['target'].mean().sort_values(ascending=False)\n",
        "means.index[0]\n",
        "\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 35
        },
        "id": "rZ6hyO_tqPBU",
        "outputId": "7b1ca8f5-81f9-465b-fe65-4e2f15a1288e"
      },
      "execution_count": 20,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'Category_C'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 20
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "std = df.groupby('cat_feature_1')['target'].std().sort_values(ascending=False)\n",
        "std_diff = std['High']-std['Low']\n",
        "std_diff\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "3d3xbGQUsb25",
        "outputId": "b3230d2d-22a6-4ac0-897f-631679cca558"
      },
      "execution_count": 21,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.877185200149718"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "min = df.groupby('cat_feature_2')['feature_8'].min()\n",
        "min['Category_C']\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "yCueAESgDXbV",
        "outputId": "74634cc7-19f8-4086-d531-ce53b321ad43"
      },
      "execution_count": 22,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "-255.53508400442365"
            ]
          },
          "metadata": {},
          "execution_count": 22
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "filtereddf = df[(df['cat_feature_1']=='High') & (df['cat_feature_2']=='Category_A')]\n",
        "feature12= filtereddf[[\"feature_12\"]]\n",
        "feature12.var()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 115
        },
        "id": "T_eM2J02DgvH",
        "outputId": "553b1581-6da9-4794-f8cf-be5b96f411fc"
      },
      "execution_count": 29,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "feature_12    11267.17883\n",
              "dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>feature_12</th>\n",
              "      <td>11267.17883</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Machine Learning model"
      ],
      "metadata": {
        "id": "3lD1mhptL5ow"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "nFybIsLvemyt",
        "outputId": "3857d873-4ee5-42df-beee-2559d897d8f0",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 585
        }
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "feature_1     0.477372\n",
              "feature_2     0.429591\n",
              "feature_3     0.454191\n",
              "feature_4     0.403652\n",
              "feature_5     0.515925\n",
              "feature_6     0.406786\n",
              "feature_7     0.524721\n",
              "feature_8     0.521113\n",
              "feature_9     0.434764\n",
              "feature_10    0.388657\n",
              "feature_11    0.398017\n",
              "feature_12    0.418884\n",
              "feature_13    0.494367\n",
              "feature_14    0.442207\n",
              "feature_15    0.499941\n",
              "target        1.000000\n",
              "Name: target, dtype: float64"
            ],
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>target</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>feature_1</th>\n",
              "      <td>0.477372</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_2</th>\n",
              "      <td>0.429591</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_3</th>\n",
              "      <td>0.454191</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_4</th>\n",
              "      <td>0.403652</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_5</th>\n",
              "      <td>0.515925</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_6</th>\n",
              "      <td>0.406786</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_7</th>\n",
              "      <td>0.524721</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_8</th>\n",
              "      <td>0.521113</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_9</th>\n",
              "      <td>0.434764</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_10</th>\n",
              "      <td>0.388657</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_11</th>\n",
              "      <td>0.398017</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_12</th>\n",
              "      <td>0.418884</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_13</th>\n",
              "      <td>0.494367</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_14</th>\n",
              "      <td>0.442207</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>feature_15</th>\n",
              "      <td>0.499941</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>target</th>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div><br><label><b>dtype:</b> float64</label>"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "corr_matrix['target']"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "dmHhn2-gemyu"
      },
      "source": [
        "# Prepare the Data for Machine Learning Algorithms"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HqhU44qqemyv"
      },
      "source": [
        "Transform the training set:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4crWBmYEemyv"
      },
      "outputs": [],
      "source": [
        "X = imputer.transform(housing_num)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "S10hxedvemyv"
      },
      "outputs": [],
      "source": [
        "housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n",
        "                          index=housing.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qlBnbuvTemyv",
        "outputId": "0c910a22-f7b4-4076-839e-7bd6adc5010b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>4629</th>\n",
              "      <td>-118.30</td>\n",
              "      <td>34.07</td>\n",
              "      <td>18.0</td>\n",
              "      <td>3759.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3296.0</td>\n",
              "      <td>1462.0</td>\n",
              "      <td>2.2708</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6068</th>\n",
              "      <td>-117.86</td>\n",
              "      <td>34.01</td>\n",
              "      <td>16.0</td>\n",
              "      <td>4632.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3038.0</td>\n",
              "      <td>727.0</td>\n",
              "      <td>5.1762</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17923</th>\n",
              "      <td>-121.97</td>\n",
              "      <td>37.35</td>\n",
              "      <td>30.0</td>\n",
              "      <td>1955.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>999.0</td>\n",
              "      <td>386.0</td>\n",
              "      <td>4.6328</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13656</th>\n",
              "      <td>-117.30</td>\n",
              "      <td>34.05</td>\n",
              "      <td>6.0</td>\n",
              "      <td>2155.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>1039.0</td>\n",
              "      <td>391.0</td>\n",
              "      <td>1.6675</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19252</th>\n",
              "      <td>-122.79</td>\n",
              "      <td>38.48</td>\n",
              "      <td>7.0</td>\n",
              "      <td>6837.0</td>\n",
              "      <td>433.0</td>\n",
              "      <td>3468.0</td>\n",
              "      <td>1405.0</td>\n",
              "      <td>3.1662</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "4629     -118.30     34.07                18.0       3759.0           433.0   \n",
              "6068     -117.86     34.01                16.0       4632.0           433.0   \n",
              "17923    -121.97     37.35                30.0       1955.0           433.0   \n",
              "13656    -117.30     34.05                 6.0       2155.0           433.0   \n",
              "19252    -122.79     38.48                 7.0       6837.0           433.0   \n",
              "\n",
              "       population  households  median_income  \n",
              "4629       3296.0      1462.0         2.2708  \n",
              "6068       3038.0       727.0         5.1762  \n",
              "17923       999.0       386.0         4.6328  \n",
              "13656      1039.0       391.0         1.6675  \n",
              "19252      3468.0      1405.0         3.1662  "
            ]
          },
          "execution_count": 59,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_tr.loc[sample_incomplete_rows.index.values]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Tq7LGJsOemyv",
        "outputId": "00c37bd0-0821-41bd-a839-167c19a493fc"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'median'"
            ]
          },
          "execution_count": 60,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "imputer.strategy"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_mmgDZy8emyv"
      },
      "outputs": [],
      "source": [
        "housing_tr = pd.DataFrame(X, columns=housing_num.columns,\n",
        "                          index=housing_num.index)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "LouznViMemyv",
        "outputId": "3e59d457-b55d-49a4-ff52-c1c43081f9c9"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17606</th>\n",
              "      <td>-121.89</td>\n",
              "      <td>37.29</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1568.0</td>\n",
              "      <td>351.0</td>\n",
              "      <td>710.0</td>\n",
              "      <td>339.0</td>\n",
              "      <td>2.7042</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18632</th>\n",
              "      <td>-121.93</td>\n",
              "      <td>37.05</td>\n",
              "      <td>14.0</td>\n",
              "      <td>679.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>306.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>6.4214</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14650</th>\n",
              "      <td>-117.20</td>\n",
              "      <td>32.77</td>\n",
              "      <td>31.0</td>\n",
              "      <td>1952.0</td>\n",
              "      <td>471.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>2.8621</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3230</th>\n",
              "      <td>-119.61</td>\n",
              "      <td>36.31</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1847.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>1460.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>1.8839</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3555</th>\n",
              "      <td>-118.59</td>\n",
              "      <td>34.23</td>\n",
              "      <td>17.0</td>\n",
              "      <td>6592.0</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>4459.0</td>\n",
              "      <td>1463.0</td>\n",
              "      <td>3.0347</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "       longitude  latitude  housing_median_age  total_rooms  total_bedrooms  \\\n",
              "17606    -121.89     37.29                38.0       1568.0           351.0   \n",
              "18632    -121.93     37.05                14.0        679.0           108.0   \n",
              "14650    -117.20     32.77                31.0       1952.0           471.0   \n",
              "3230     -119.61     36.31                25.0       1847.0           371.0   \n",
              "3555     -118.59     34.23                17.0       6592.0          1525.0   \n",
              "\n",
              "       population  households  median_income  \n",
              "17606       710.0       339.0         2.7042  \n",
              "18632       306.0       113.0         6.4214  \n",
              "14650       936.0       462.0         2.8621  \n",
              "3230       1460.0       353.0         1.8839  \n",
              "3555       4459.0      1463.0         3.0347  "
            ]
          },
          "execution_count": 62,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_tr.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qpLHuUIUemyv"
      },
      "source": [
        "## Handling Text and Categorical Attributes"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "j-609jPFemyv"
      },
      "source": [
        "Now let's preprocess the categorical input feature, `ocean_proximity`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mdfApatSemyv",
        "outputId": "133fa111-b402-480b-adce-5bc66390a62d"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>ocean_proximity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17606</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18632</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14650</th>\n",
              "      <td>NEAR OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3230</th>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3555</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19480</th>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8879</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13685</th>\n",
              "      <td>INLAND</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4937</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4861</th>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      ocean_proximity\n",
              "17606       <1H OCEAN\n",
              "18632       <1H OCEAN\n",
              "14650      NEAR OCEAN\n",
              "3230           INLAND\n",
              "3555        <1H OCEAN\n",
              "19480          INLAND\n",
              "8879        <1H OCEAN\n",
              "13685          INLAND\n",
              "4937        <1H OCEAN\n",
              "4861        <1H OCEAN"
            ]
          },
          "execution_count": 63,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_cat = housing[[\"ocean_proximity\"]]\n",
        "housing_cat.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Rt6Ve8RRemyw",
        "outputId": "b6906c71-be13-496e-a077-2cc5f19f3553"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[0.],\n",
              "       [0.],\n",
              "       [4.],\n",
              "       [1.],\n",
              "       [0.],\n",
              "       [1.],\n",
              "       [0.],\n",
              "       [1.],\n",
              "       [0.],\n",
              "       [0.]])"
            ]
          },
          "execution_count": 64,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.preprocessing import OrdinalEncoder\n",
        "\n",
        "ordinal_encoder = OrdinalEncoder()\n",
        "housing_cat_encoded = ordinal_encoder.fit_transform(housing_cat)\n",
        "housing_cat_encoded[:10]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "CdE2oRzAemyw",
        "outputId": "ec8100c3-8aa4-41b4-8b63-695ef4da8ed9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[array(['<1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],\n",
              "       dtype=object)]"
            ]
          },
          "execution_count": 65,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "ordinal_encoder.categories_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T0zABW4temyw",
        "outputId": "ccc900b6-e061-4fc0-abc8-93da3ef660f7"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "<16512x5 sparse matrix of type '<class 'numpy.float64'>'\n",
              "\twith 16512 stored elements in Compressed Sparse Row format>"
            ]
          },
          "execution_count": 66,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.preprocessing import OneHotEncoder\n",
        "\n",
        "cat_encoder = OneHotEncoder()\n",
        "housing_cat_1hot = cat_encoder.fit_transform(housing_cat)\n",
        "housing_cat_1hot"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RGb_mrm9emyw"
      },
      "source": [
        "By default, the `OneHotEncoder` class returns a sparse array, but we can convert it to a dense array if needed by calling the `toarray()` method:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ZMtOM9jBemyw",
        "outputId": "671be040-5926-4cfa-82ab-77c36e33fb48"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1.],\n",
              "       ...,\n",
              "       [0., 1., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0.]])"
            ]
          },
          "execution_count": 67,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_cat_1hot.toarray()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "drRvNXZvemyw"
      },
      "source": [
        "Alternatively, you can set `sparse=False` when creating the `OneHotEncoder`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qtj0Ri1uemyw",
        "outputId": "ff02267b-af5c-4ef2-b612-6669c0354ebe"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[1., 0., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 0., 1.],\n",
              "       ...,\n",
              "       [0., 1., 0., 0., 0.],\n",
              "       [1., 0., 0., 0., 0.],\n",
              "       [0., 0., 0., 1., 0.]])"
            ]
          },
          "execution_count": 68,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cat_encoder = OneHotEncoder(sparse=False)\n",
        "housing_cat_1hot = cat_encoder.fit_transform(housing_cat)\n",
        "housing_cat_1hot"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PwJkdEGtemyw",
        "outputId": "37096d9c-cd29-4ec1-cdf2-061963c770e0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[array(['<1H OCEAN', 'INLAND', 'ISLAND', 'NEAR BAY', 'NEAR OCEAN'],\n",
              "       dtype=object)]"
            ]
          },
          "execution_count": 69,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "cat_encoder.categories_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SODNNq_Demyw"
      },
      "source": [
        "## Custom Transformers"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7Y5XUBYmemyw"
      },
      "source": [
        "Let's create a custom transformer to add extra attributes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4MZgntFdemyw"
      },
      "outputs": [],
      "source": [
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "# column index\n",
        "rooms_ix, bedrooms_ix, population_ix, households_ix = 3, 4, 5, 6\n",
        "\n",
        "class CombinedAttributesAdder(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, add_bedrooms_per_room=True): # no *args or **kargs\n",
        "        self.add_bedrooms_per_room = add_bedrooms_per_room\n",
        "    def fit(self, X, y=None):\n",
        "        return self  # nothing else to do\n",
        "    def transform(self, X):\n",
        "        rooms_per_household = X[:, rooms_ix] / X[:, households_ix]\n",
        "        population_per_household = X[:, population_ix] / X[:, households_ix]\n",
        "        if self.add_bedrooms_per_room:\n",
        "            bedrooms_per_room = X[:, bedrooms_ix] / X[:, rooms_ix]\n",
        "            return np.c_[X, rooms_per_household, population_per_household,\n",
        "                         bedrooms_per_room]\n",
        "        else:\n",
        "            return np.c_[X, rooms_per_household, population_per_household]\n",
        "\n",
        "attr_adder = CombinedAttributesAdder(add_bedrooms_per_room=False)\n",
        "housing_extra_attribs = attr_adder.transform(housing.values)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "d-5JZRsdemyw"
      },
      "source": [
        "Note that I hard coded the indices (3, 4, 5, 6) for concision and clarity in the book, but it would be much cleaner to get them dynamically, like this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "W0HnWtKWemyw"
      },
      "outputs": [],
      "source": [
        "col_names = \"total_rooms\", \"total_bedrooms\", \"population\", \"households\"\n",
        "rooms_ix, bedrooms_ix, population_ix, households_ix = [\n",
        "    housing.columns.get_loc(c) for c in col_names] # get the column indices"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "W6dirmqsemyw"
      },
      "source": [
        "Also, `housing_extra_attribs` is a NumPy array, we've lost the column names (unfortunately, that's a problem with Scikit-Learn). To recover a `DataFrame`, you could run this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Por0erademyx",
        "outputId": "cc42583e-4abe-40ea-f1b2-20ea59671781"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>longitude</th>\n",
              "      <th>latitude</th>\n",
              "      <th>housing_median_age</th>\n",
              "      <th>total_rooms</th>\n",
              "      <th>total_bedrooms</th>\n",
              "      <th>population</th>\n",
              "      <th>households</th>\n",
              "      <th>median_income</th>\n",
              "      <th>ocean_proximity</th>\n",
              "      <th>rooms_per_household</th>\n",
              "      <th>population_per_household</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>17606</th>\n",
              "      <td>-121.89</td>\n",
              "      <td>37.29</td>\n",
              "      <td>38.0</td>\n",
              "      <td>1568.0</td>\n",
              "      <td>351.0</td>\n",
              "      <td>710.0</td>\n",
              "      <td>339.0</td>\n",
              "      <td>2.7042</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "      <td>4.625369</td>\n",
              "      <td>2.094395</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18632</th>\n",
              "      <td>-121.93</td>\n",
              "      <td>37.05</td>\n",
              "      <td>14.0</td>\n",
              "      <td>679.0</td>\n",
              "      <td>108.0</td>\n",
              "      <td>306.0</td>\n",
              "      <td>113.0</td>\n",
              "      <td>6.4214</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "      <td>6.00885</td>\n",
              "      <td>2.707965</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14650</th>\n",
              "      <td>-117.2</td>\n",
              "      <td>32.77</td>\n",
              "      <td>31.0</td>\n",
              "      <td>1952.0</td>\n",
              "      <td>471.0</td>\n",
              "      <td>936.0</td>\n",
              "      <td>462.0</td>\n",
              "      <td>2.8621</td>\n",
              "      <td>NEAR OCEAN</td>\n",
              "      <td>4.225108</td>\n",
              "      <td>2.025974</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3230</th>\n",
              "      <td>-119.61</td>\n",
              "      <td>36.31</td>\n",
              "      <td>25.0</td>\n",
              "      <td>1847.0</td>\n",
              "      <td>371.0</td>\n",
              "      <td>1460.0</td>\n",
              "      <td>353.0</td>\n",
              "      <td>1.8839</td>\n",
              "      <td>INLAND</td>\n",
              "      <td>5.232295</td>\n",
              "      <td>4.135977</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3555</th>\n",
              "      <td>-118.59</td>\n",
              "      <td>34.23</td>\n",
              "      <td>17.0</td>\n",
              "      <td>6592.0</td>\n",
              "      <td>1525.0</td>\n",
              "      <td>4459.0</td>\n",
              "      <td>1463.0</td>\n",
              "      <td>3.0347</td>\n",
              "      <td>&lt;1H OCEAN</td>\n",
              "      <td>4.50581</td>\n",
              "      <td>3.047847</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "      longitude latitude housing_median_age total_rooms total_bedrooms  \\\n",
              "17606   -121.89    37.29               38.0      1568.0          351.0   \n",
              "18632   -121.93    37.05               14.0       679.0          108.0   \n",
              "14650    -117.2    32.77               31.0      1952.0          471.0   \n",
              "3230    -119.61    36.31               25.0      1847.0          371.0   \n",
              "3555    -118.59    34.23               17.0      6592.0         1525.0   \n",
              "\n",
              "      population households median_income ocean_proximity rooms_per_household  \\\n",
              "17606      710.0      339.0        2.7042       <1H OCEAN            4.625369   \n",
              "18632      306.0      113.0        6.4214       <1H OCEAN             6.00885   \n",
              "14650      936.0      462.0        2.8621      NEAR OCEAN            4.225108   \n",
              "3230      1460.0      353.0        1.8839          INLAND            5.232295   \n",
              "3555      4459.0     1463.0        3.0347       <1H OCEAN             4.50581   \n",
              "\n",
              "      population_per_household  \n",
              "17606                 2.094395  \n",
              "18632                 2.707965  \n",
              "14650                 2.025974  \n",
              "3230                  4.135977  \n",
              "3555                  3.047847  "
            ]
          },
          "execution_count": 72,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_extra_attribs = pd.DataFrame(\n",
        "    housing_extra_attribs,\n",
        "    columns=list(housing.columns)+[\"rooms_per_household\", \"population_per_household\"],\n",
        "    index=housing.index)\n",
        "housing_extra_attribs.head()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ebE5km2Nemyx"
      },
      "source": [
        "## Transformation Pipelines"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "uKg7Ii7Hemyx"
      },
      "source": [
        "Now let's build a pipeline for preprocessing the numerical attributes:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xoEUQNjUemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.pipeline import Pipeline\n",
        "from sklearn.preprocessing import StandardScaler\n",
        "\n",
        "num_pipeline = Pipeline([\n",
        "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
        "        ('attribs_adder', CombinedAttributesAdder()),\n",
        "        ('std_scaler', StandardScaler()),\n",
        "    ])\n",
        "\n",
        "housing_num_tr = num_pipeline.fit_transform(housing_num)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "1BjnPOV7emyx",
        "outputId": "8ceb9a52-a306-4317-8c61-0c721bc31e20"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, ..., -0.31205452,\n",
              "        -0.08649871,  0.15531753],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , ...,  0.21768338,\n",
              "        -0.03353391, -0.83628902],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, ..., -0.46531516,\n",
              "        -0.09240499,  0.4222004 ],\n",
              "       ...,\n",
              "       [ 1.58648943, -0.72478134, -1.56295222, ...,  0.3469342 ,\n",
              "        -0.03055414, -0.52177644],\n",
              "       [ 0.78221312, -0.85106801,  0.18664186, ...,  0.02499488,\n",
              "         0.06150916, -0.30340741],\n",
              "       [-1.43579109,  0.99645926,  1.85670895, ..., -0.22852947,\n",
              "        -0.09586294,  0.10180567]])"
            ]
          },
          "execution_count": 74,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_num_tr"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5d36IGVDemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.compose import ColumnTransformer\n",
        "\n",
        "num_attribs = list(housing_num)\n",
        "cat_attribs = [\"ocean_proximity\"]\n",
        "\n",
        "full_pipeline = ColumnTransformer([\n",
        "        (\"num\", num_pipeline, num_attribs),\n",
        "        (\"cat\", OneHotEncoder(), cat_attribs),\n",
        "    ])\n",
        "\n",
        "housing_prepared = full_pipeline.fit_transform(housing)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "qoQ6TZxuemyx",
        "outputId": "7ce96a55-5378-43f1-ec7a-954cd15f33e8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  1.        ],\n",
              "       ...,\n",
              "       [ 1.58648943, -0.72478134, -1.56295222, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 0.78221312, -0.85106801,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.43579109,  0.99645926,  1.85670895, ...,  0.        ,\n",
              "         1.        ,  0.        ]])"
            ]
          },
          "execution_count": 76,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hS5qqExiemyx",
        "outputId": "1e52159d-48dd-4685-a13e-212f2b500dfe"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(16512, 16)"
            ]
          },
          "execution_count": 77,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mWTu2flsemyx"
      },
      "source": [
        "For reference, here is the old solution based on a `DataFrameSelector` transformer (to just select a subset of the Pandas `DataFrame` columns), and a `FeatureUnion`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "030mD9Vtemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "# Create a class to select numerical or categorical columns\n",
        "class OldDataFrameSelector(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, attribute_names):\n",
        "        self.attribute_names = attribute_names\n",
        "    def fit(self, X, y=None):\n",
        "        return self\n",
        "    def transform(self, X):\n",
        "        return X[self.attribute_names].values"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oFTk8410emyx"
      },
      "source": [
        "Now let's join all these components into a big pipeline that will preprocess both the numerical and the categorical features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OtXdsY9memyx"
      },
      "outputs": [],
      "source": [
        "num_attribs = list(housing_num)\n",
        "cat_attribs = [\"ocean_proximity\"]\n",
        "\n",
        "old_num_pipeline = Pipeline([\n",
        "        ('selector', OldDataFrameSelector(num_attribs)),\n",
        "        ('imputer', SimpleImputer(strategy=\"median\")),\n",
        "        ('attribs_adder', CombinedAttributesAdder()),\n",
        "        ('std_scaler', StandardScaler()),\n",
        "    ])\n",
        "\n",
        "old_cat_pipeline = Pipeline([\n",
        "        ('selector', OldDataFrameSelector(cat_attribs)),\n",
        "        ('cat_encoder', OneHotEncoder(sparse=False)),\n",
        "    ])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jB86uVjSemyx"
      },
      "outputs": [],
      "source": [
        "from sklearn.pipeline import FeatureUnion\n",
        "\n",
        "old_full_pipeline = FeatureUnion(transformer_list=[\n",
        "        (\"num_pipeline\", old_num_pipeline),\n",
        "        (\"cat_pipeline\", old_cat_pipeline),\n",
        "    ])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iSMc0yXdemyy",
        "outputId": "aa335ce7-f59c-4918-c85b-7d693456dfc0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  1.        ],\n",
              "       ...,\n",
              "       [ 1.58648943, -0.72478134, -1.56295222, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [ 0.78221312, -0.85106801,  0.18664186, ...,  0.        ,\n",
              "         0.        ,  0.        ],\n",
              "       [-1.43579109,  0.99645926,  1.85670895, ...,  0.        ,\n",
              "         1.        ,  0.        ]])"
            ]
          },
          "execution_count": 81,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "old_housing_prepared = old_full_pipeline.fit_transform(housing)\n",
        "old_housing_prepared"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wASSRWUTemyy"
      },
      "source": [
        "The result is the same as with the `ColumnTransformer`:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "g-LOAexhemyy",
        "outputId": "a39307cc-17c3-4352-87d5-cda908114cba"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "execution_count": 82,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.allclose(housing_prepared, old_housing_prepared)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "BemsUJ85emyy"
      },
      "source": [
        "# Select and Train a Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Iag8m7Vaemyy"
      },
      "source": [
        "## Training and Evaluating on the Training Set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "e3FMvOHLemyy",
        "outputId": "cb7bc7db-2017-4aa1-feb1-10cd19aa2ae1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "LinearRegression()"
            ]
          },
          "execution_count": 83,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "lin_reg = LinearRegression()\n",
        "lin_reg.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8_j9tPEHemyy",
        "outputId": "4d3677de-9938-48a7-fb94-0a59c218d46d"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Predictions: [210644.60459286 317768.80697211 210956.43331178  59218.98886849\n",
            " 189747.55849879]\n"
          ]
        }
      ],
      "source": [
        "# let's try the full preprocessing pipeline on a few training instances\n",
        "some_data = housing.iloc[:5]\n",
        "some_labels = housing_labels.iloc[:5]\n",
        "some_data_prepared = full_pipeline.transform(some_data)\n",
        "\n",
        "print(\"Predictions:\", lin_reg.predict(some_data_prepared))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VGIAAdY1emyy"
      },
      "source": [
        "Compare against the actual values:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_nWj2zXbemyy",
        "outputId": "19d86df3-238e-412d-cd64-50e907b66c25"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Labels: [286600.0, 340600.0, 196900.0, 46300.0, 254500.0]\n"
          ]
        }
      ],
      "source": [
        "print(\"Labels:\", list(some_labels))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fh07jCkSemyy",
        "outputId": "927b4164-98bd-4733-9a44-bae3587bc1d8"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962,  0.74333089, -0.49323393, -0.44543821,\n",
              "        -0.63621141, -0.42069842, -0.61493744, -0.31205452, -0.08649871,\n",
              "         0.15531753,  1.        ,  0.        ,  0.        ,  0.        ,\n",
              "         0.        ],\n",
              "       [-1.17602483,  0.6596948 , -1.1653172 , -0.90896655, -1.0369278 ,\n",
              "        -0.99833135, -1.02222705,  1.33645936,  0.21768338, -0.03353391,\n",
              "        -0.83628902,  1.        ,  0.        ,  0.        ,  0.        ,\n",
              "         0.        ],\n",
              "       [ 1.18684903, -1.34218285,  0.18664186, -0.31365989, -0.15334458,\n",
              "        -0.43363936, -0.0933178 , -0.5320456 , -0.46531516, -0.09240499,\n",
              "         0.4222004 ,  0.        ,  0.        ,  0.        ,  0.        ,\n",
              "         1.        ],\n",
              "       [-0.01706767,  0.31357576, -0.29052016, -0.36276217, -0.39675594,\n",
              "         0.03604096, -0.38343559, -1.04556555, -0.07966124,  0.08973561,\n",
              "        -0.19645314,  0.        ,  1.        ,  0.        ,  0.        ,\n",
              "         0.        ],\n",
              "       [ 0.49247384, -0.65929936, -0.92673619,  1.85619316,  2.41221109,\n",
              "         2.72415407,  2.57097492, -0.44143679, -0.35783383, -0.00419445,\n",
              "         0.2699277 ,  1.        ,  0.        ,  0.        ,  0.        ,\n",
              "         0.        ]])"
            ]
          },
          "execution_count": 86,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "some_data_prepared"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-cXSMgKeemyy",
        "outputId": "bb4768f0-51e8-4aab-ef8c-7e566d602913"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "68628.19819848923"
            ]
          },
          "execution_count": 87,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import mean_squared_error\n",
        "\n",
        "housing_predictions = lin_reg.predict(housing_prepared)\n",
        "lin_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "lin_rmse = np.sqrt(lin_mse)\n",
        "lin_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "FlTeGNTqemyy"
      },
      "source": [
        "**Note**: since Scikit-Learn 0.22, you can get the RMSE directly by calling the `mean_squared_error()` function with `squared=False`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QCMQutEzemyy",
        "outputId": "c86735df-760f-4bea-9b6e-5ede4d45c8d1"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "49439.89599001897"
            ]
          },
          "execution_count": 88,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.metrics import mean_absolute_error\n",
        "\n",
        "lin_mae = mean_absolute_error(housing_labels, housing_predictions)\n",
        "lin_mae"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "A7YbOH9temyy",
        "outputId": "4eb3f4e8-374b-46bf-a57c-165530b1e043"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "DecisionTreeRegressor(random_state=42)"
            ]
          },
          "execution_count": 89,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.tree import DecisionTreeRegressor\n",
        "\n",
        "tree_reg = DecisionTreeRegressor(random_state=42)\n",
        "tree_reg.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m-AIFsgTemyz",
        "outputId": "b5b400a6-b54a-49ae-92d9-cc0113f0ddbd"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "0.0"
            ]
          },
          "execution_count": 90,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_predictions = tree_reg.predict(housing_prepared)\n",
        "tree_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "tree_rmse = np.sqrt(tree_mse)\n",
        "tree_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m4iwVjvTemyz"
      },
      "source": [
        "## Better Evaluation Using Cross-Validation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "be0k4XOUemy3"
      },
      "outputs": [],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "scores = cross_val_score(tree_reg, housing_prepared, housing_labels,\n",
        "                         scoring=\"neg_mean_squared_error\", cv=10)\n",
        "tree_rmse_scores = np.sqrt(-scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "72agZRfFemy3",
        "outputId": "c6c92ad0-6994-4481-b85e-ae95ab8137ae"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scores: [70194.33680785 66855.16363941 72432.58244769 70758.73896782\n",
            " 71115.88230639 75585.14172901 70262.86139133 70273.6325285\n",
            " 75366.87952553 71231.65726027]\n",
            "Mean: 71407.68766037929\n",
            "Standard deviation: 2439.4345041191004\n"
          ]
        }
      ],
      "source": [
        "def display_scores(scores):\n",
        "    print(\"Scores:\", scores)\n",
        "    print(\"Mean:\", scores.mean())\n",
        "    print(\"Standard deviation:\", scores.std())\n",
        "\n",
        "display_scores(tree_rmse_scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "loMPCUrvemy3",
        "outputId": "6007ef32-edc8-4ff7-e11d-0958bfb6a1c3"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scores: [66782.73843989 66960.118071   70347.95244419 74739.57052552\n",
            " 68031.13388938 71193.84183426 64969.63056405 68281.61137997\n",
            " 71552.91566558 67665.10082067]\n",
            "Mean: 69052.46136345083\n",
            "Standard deviation: 2731.674001798342\n"
          ]
        }
      ],
      "source": [
        "lin_scores = cross_val_score(lin_reg, housing_prepared, housing_labels,\n",
        "                             scoring=\"neg_mean_squared_error\", cv=10)\n",
        "lin_rmse_scores = np.sqrt(-lin_scores)\n",
        "display_scores(lin_rmse_scores)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TNOnBFTZemy3"
      },
      "source": [
        "**Note**: we specify `n_estimators=100` to be future-proof since the default value is going to change to 100 in Scikit-Learn 0.22 (for simplicity, this is not shown in the book)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "84WN7wQuemy3",
        "outputId": "2c528998-0187-4201-e084-793b695aa21a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomForestRegressor(random_state=42)"
            ]
          },
          "execution_count": 94,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.ensemble import RandomForestRegressor\n",
        "\n",
        "forest_reg = RandomForestRegressor(n_estimators=100, random_state=42)\n",
        "forest_reg.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "dIG8Ml45emy3",
        "outputId": "ae16bb13-d36b-428a-a868-67d914f2edee"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "18603.515021376355"
            ]
          },
          "execution_count": 95,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_predictions = forest_reg.predict(housing_prepared)\n",
        "forest_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "forest_rmse = np.sqrt(forest_mse)\n",
        "forest_rmse"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iTnZZ_6kemy3",
        "outputId": "5d4a59be-0858-4d39-8261-5a9d00b31cdf"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Scores: [49519.80364233 47461.9115823  50029.02762854 52325.28068953\n",
            " 49308.39426421 53446.37892622 48634.8036574  47585.73832311\n",
            " 53490.10699751 50021.5852922 ]\n",
            "Mean: 50182.303100336096\n",
            "Standard deviation: 2097.0810550985693\n"
          ]
        }
      ],
      "source": [
        "from sklearn.model_selection import cross_val_score\n",
        "\n",
        "forest_scores = cross_val_score(forest_reg, housing_prepared, housing_labels,\n",
        "                                scoring=\"neg_mean_squared_error\", cv=10)\n",
        "forest_rmse_scores = np.sqrt(-forest_scores)\n",
        "display_scores(forest_rmse_scores)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6oqlTjOTemy3",
        "outputId": "edd443b6-c570-4f49-e035-7e5564c3fd82"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "count       10.000000\n",
              "mean     69052.461363\n",
              "std       2879.437224\n",
              "min      64969.630564\n",
              "25%      67136.363758\n",
              "50%      68156.372635\n",
              "75%      70982.369487\n",
              "max      74739.570526\n",
              "dtype: float64"
            ]
          },
          "execution_count": 97,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "scores = cross_val_score(lin_reg, housing_prepared, housing_labels, scoring=\"neg_mean_squared_error\", cv=10)\n",
        "pd.Series(np.sqrt(-scores)).describe()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sy2xiLLJemy4",
        "outputId": "323f4191-6914-4365-8473-94872f363ac9"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "111094.6308539982"
            ]
          },
          "execution_count": 98,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.svm import SVR\n",
        "\n",
        "svm_reg = SVR(kernel=\"linear\")\n",
        "svm_reg.fit(housing_prepared, housing_labels)\n",
        "housing_predictions = svm_reg.predict(housing_prepared)\n",
        "svm_mse = mean_squared_error(housing_labels, housing_predictions)\n",
        "svm_rmse = np.sqrt(svm_mse)\n",
        "svm_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fcgEMQAiemy4"
      },
      "source": [
        "# Fine-Tune Your Model"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XsjX__u7emy4"
      },
      "source": [
        "## Grid Search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jXJf594Zemy4",
        "outputId": "975e2591-3097-4ce0-e99c-cbf9009a5e75"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "             param_grid=[{'max_features': [2, 4, 6, 8],\n",
              "                          'n_estimators': [3, 10, 30]},\n",
              "                         {'bootstrap': [False], 'max_features': [2, 3, 4],\n",
              "                          'n_estimators': [3, 10]}],\n",
              "             return_train_score=True, scoring='neg_mean_squared_error')"
            ]
          },
          "execution_count": 99,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = [\n",
        "    # try 12 (3×4) combinations of hyperparameters\n",
        "    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n",
        "    # then try 6 (2×3) combinations with bootstrap set as False\n",
        "    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n",
        "  ]\n",
        "\n",
        "forest_reg = RandomForestRegressor(random_state=42)\n",
        "# train across 5 folds, that's a total of (12+6)*5=90 rounds of training\n",
        "grid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n",
        "                           scoring='neg_mean_squared_error',\n",
        "                           return_train_score=True)\n",
        "grid_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "L5L9B3Wlemy4"
      },
      "source": [
        "The best hyperparameter combination found:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "do2tw5Zlemy4",
        "outputId": "4c6cc43b-e8cd-4f5b-cf6c-7d6dcff74940"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'max_features': 8, 'n_estimators': 30}"
            ]
          },
          "execution_count": 100,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.best_params_"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "5QuB6m5wemy4",
        "outputId": "0a2b572c-47bd-45aa-fae0-72255478d638"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomForestRegressor(max_features=8, n_estimators=30, random_state=42)"
            ]
          },
          "execution_count": 101,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.best_estimator_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5zUGSppCemy4"
      },
      "source": [
        "Let's look at the score of each hyperparameter combination tested during the grid search:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "7g9elSlremy4",
        "outputId": "d7a3b182-aaed-47d7-c08b-662a80f54435"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "63669.11631261028 {'max_features': 2, 'n_estimators': 3}\n",
            "55627.099719926795 {'max_features': 2, 'n_estimators': 10}\n",
            "53384.57275149205 {'max_features': 2, 'n_estimators': 30}\n",
            "60965.950449450494 {'max_features': 4, 'n_estimators': 3}\n",
            "52741.04704299915 {'max_features': 4, 'n_estimators': 10}\n",
            "50377.40461678399 {'max_features': 4, 'n_estimators': 30}\n",
            "58663.93866579625 {'max_features': 6, 'n_estimators': 3}\n",
            "52006.19873526564 {'max_features': 6, 'n_estimators': 10}\n",
            "50146.51167415009 {'max_features': 6, 'n_estimators': 30}\n",
            "57869.25276169646 {'max_features': 8, 'n_estimators': 3}\n",
            "51711.127883959234 {'max_features': 8, 'n_estimators': 10}\n",
            "49682.273345071546 {'max_features': 8, 'n_estimators': 30}\n",
            "62895.06951262424 {'bootstrap': False, 'max_features': 2, 'n_estimators': 3}\n",
            "54658.176157539405 {'bootstrap': False, 'max_features': 2, 'n_estimators': 10}\n",
            "59470.40652318466 {'bootstrap': False, 'max_features': 3, 'n_estimators': 3}\n",
            "52724.9822587892 {'bootstrap': False, 'max_features': 3, 'n_estimators': 10}\n",
            "57490.5691951261 {'bootstrap': False, 'max_features': 4, 'n_estimators': 3}\n",
            "51009.495668875716 {'bootstrap': False, 'max_features': 4, 'n_estimators': 10}\n"
          ]
        }
      ],
      "source": [
        "cvres = grid_search.cv_results_\n",
        "for mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n",
        "    print(np.sqrt(-mean_score), params)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "unM5D-ASemy4",
        "outputId": "44dca1f5-8544-4a69-865c-497e764abe14"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mean_fit_time</th>\n",
              "      <th>std_fit_time</th>\n",
              "      <th>mean_score_time</th>\n",
              "      <th>std_score_time</th>\n",
              "      <th>param_max_features</th>\n",
              "      <th>param_n_estimators</th>\n",
              "      <th>param_bootstrap</th>\n",
              "      <th>params</th>\n",
              "      <th>split0_test_score</th>\n",
              "      <th>split1_test_score</th>\n",
              "      <th>...</th>\n",
              "      <th>mean_test_score</th>\n",
              "      <th>std_test_score</th>\n",
              "      <th>rank_test_score</th>\n",
              "      <th>split0_train_score</th>\n",
              "      <th>split1_train_score</th>\n",
              "      <th>split2_train_score</th>\n",
              "      <th>split3_train_score</th>\n",
              "      <th>split4_train_score</th>\n",
              "      <th>mean_train_score</th>\n",
              "      <th>std_train_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.050905</td>\n",
              "      <td>0.004097</td>\n",
              "      <td>0.002766</td>\n",
              "      <td>0.000256</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 2, 'n_estimators': 3}</td>\n",
              "      <td>-3.837622e+09</td>\n",
              "      <td>-4.147108e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-4.053756e+09</td>\n",
              "      <td>1.519591e+08</td>\n",
              "      <td>18</td>\n",
              "      <td>-1.064113e+09</td>\n",
              "      <td>-1.105142e+09</td>\n",
              "      <td>-1.116550e+09</td>\n",
              "      <td>-1.112342e+09</td>\n",
              "      <td>-1.129650e+09</td>\n",
              "      <td>-1.105559e+09</td>\n",
              "      <td>2.220402e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.143706</td>\n",
              "      <td>0.002170</td>\n",
              "      <td>0.007205</td>\n",
              "      <td>0.000304</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 2, 'n_estimators': 10}</td>\n",
              "      <td>-3.047771e+09</td>\n",
              "      <td>-3.254861e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.094374e+09</td>\n",
              "      <td>1.327062e+08</td>\n",
              "      <td>11</td>\n",
              "      <td>-5.927175e+08</td>\n",
              "      <td>-5.870952e+08</td>\n",
              "      <td>-5.776964e+08</td>\n",
              "      <td>-5.716332e+08</td>\n",
              "      <td>-5.802501e+08</td>\n",
              "      <td>-5.818785e+08</td>\n",
              "      <td>7.345821e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>0.410306</td>\n",
              "      <td>0.004403</td>\n",
              "      <td>0.019903</td>\n",
              "      <td>0.000964</td>\n",
              "      <td>2</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 2, 'n_estimators': 30}</td>\n",
              "      <td>-2.689185e+09</td>\n",
              "      <td>-3.021086e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.849913e+09</td>\n",
              "      <td>1.626875e+08</td>\n",
              "      <td>9</td>\n",
              "      <td>-4.381089e+08</td>\n",
              "      <td>-4.391272e+08</td>\n",
              "      <td>-4.371702e+08</td>\n",
              "      <td>-4.376955e+08</td>\n",
              "      <td>-4.452654e+08</td>\n",
              "      <td>-4.394734e+08</td>\n",
              "      <td>2.966320e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>0.069762</td>\n",
              "      <td>0.000987</td>\n",
              "      <td>0.002409</td>\n",
              "      <td>0.000080</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 4, 'n_estimators': 3}</td>\n",
              "      <td>-3.730181e+09</td>\n",
              "      <td>-3.786886e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.716847e+09</td>\n",
              "      <td>1.631510e+08</td>\n",
              "      <td>16</td>\n",
              "      <td>-9.865163e+08</td>\n",
              "      <td>-1.012565e+09</td>\n",
              "      <td>-9.169425e+08</td>\n",
              "      <td>-1.037400e+09</td>\n",
              "      <td>-9.707739e+08</td>\n",
              "      <td>-9.848396e+08</td>\n",
              "      <td>4.084607e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>0.227188</td>\n",
              "      <td>0.001444</td>\n",
              "      <td>0.006829</td>\n",
              "      <td>0.000090</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 4, 'n_estimators': 10}</td>\n",
              "      <td>-2.666283e+09</td>\n",
              "      <td>-2.784511e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.781618e+09</td>\n",
              "      <td>1.268607e+08</td>\n",
              "      <td>8</td>\n",
              "      <td>-5.097115e+08</td>\n",
              "      <td>-5.162820e+08</td>\n",
              "      <td>-4.962893e+08</td>\n",
              "      <td>-5.436192e+08</td>\n",
              "      <td>-5.160297e+08</td>\n",
              "      <td>-5.163863e+08</td>\n",
              "      <td>1.542862e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>0.711381</td>\n",
              "      <td>0.038618</td>\n",
              "      <td>0.020686</td>\n",
              "      <td>0.001864</td>\n",
              "      <td>4</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 4, 'n_estimators': 30}</td>\n",
              "      <td>-2.387153e+09</td>\n",
              "      <td>-2.588448e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.537883e+09</td>\n",
              "      <td>1.214614e+08</td>\n",
              "      <td>3</td>\n",
              "      <td>-3.838835e+08</td>\n",
              "      <td>-3.880268e+08</td>\n",
              "      <td>-3.790867e+08</td>\n",
              "      <td>-4.040957e+08</td>\n",
              "      <td>-3.845520e+08</td>\n",
              "      <td>-3.879289e+08</td>\n",
              "      <td>8.571233e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>0.094580</td>\n",
              "      <td>0.003861</td>\n",
              "      <td>0.002426</td>\n",
              "      <td>0.000118</td>\n",
              "      <td>6</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 6, 'n_estimators': 3}</td>\n",
              "      <td>-3.119657e+09</td>\n",
              "      <td>-3.586319e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.441458e+09</td>\n",
              "      <td>1.893056e+08</td>\n",
              "      <td>14</td>\n",
              "      <td>-9.245343e+08</td>\n",
              "      <td>-8.886939e+08</td>\n",
              "      <td>-9.353135e+08</td>\n",
              "      <td>-9.009801e+08</td>\n",
              "      <td>-8.624664e+08</td>\n",
              "      <td>-9.023976e+08</td>\n",
              "      <td>2.591445e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>0.311034</td>\n",
              "      <td>0.005247</td>\n",
              "      <td>0.006980</td>\n",
              "      <td>0.000283</td>\n",
              "      <td>6</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 6, 'n_estimators': 10}</td>\n",
              "      <td>-2.549663e+09</td>\n",
              "      <td>-2.782039e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.704645e+09</td>\n",
              "      <td>1.471569e+08</td>\n",
              "      <td>6</td>\n",
              "      <td>-4.980344e+08</td>\n",
              "      <td>-5.045869e+08</td>\n",
              "      <td>-4.994664e+08</td>\n",
              "      <td>-4.990325e+08</td>\n",
              "      <td>-5.055542e+08</td>\n",
              "      <td>-5.013349e+08</td>\n",
              "      <td>3.100456e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>0.979656</td>\n",
              "      <td>0.048790</td>\n",
              "      <td>0.021028</td>\n",
              "      <td>0.001812</td>\n",
              "      <td>6</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 6, 'n_estimators': 30}</td>\n",
              "      <td>-2.370010e+09</td>\n",
              "      <td>-2.583638e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.514673e+09</td>\n",
              "      <td>1.285080e+08</td>\n",
              "      <td>2</td>\n",
              "      <td>-3.838538e+08</td>\n",
              "      <td>-3.804711e+08</td>\n",
              "      <td>-3.805218e+08</td>\n",
              "      <td>-3.856095e+08</td>\n",
              "      <td>-3.901917e+08</td>\n",
              "      <td>-3.841296e+08</td>\n",
              "      <td>3.617057e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>0.118484</td>\n",
              "      <td>0.001009</td>\n",
              "      <td>0.002239</td>\n",
              "      <td>0.000068</td>\n",
              "      <td>8</td>\n",
              "      <td>3</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 8, 'n_estimators': 3}</td>\n",
              "      <td>-3.353504e+09</td>\n",
              "      <td>-3.348552e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.348850e+09</td>\n",
              "      <td>1.241939e+08</td>\n",
              "      <td>13</td>\n",
              "      <td>-9.228123e+08</td>\n",
              "      <td>-8.553031e+08</td>\n",
              "      <td>-8.603321e+08</td>\n",
              "      <td>-8.881964e+08</td>\n",
              "      <td>-9.151287e+08</td>\n",
              "      <td>-8.883545e+08</td>\n",
              "      <td>2.750227e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>0.401726</td>\n",
              "      <td>0.005465</td>\n",
              "      <td>0.007028</td>\n",
              "      <td>0.000345</td>\n",
              "      <td>8</td>\n",
              "      <td>10</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 8, 'n_estimators': 10}</td>\n",
              "      <td>-2.571970e+09</td>\n",
              "      <td>-2.718994e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.674041e+09</td>\n",
              "      <td>1.392777e+08</td>\n",
              "      <td>5</td>\n",
              "      <td>-4.932416e+08</td>\n",
              "      <td>-4.815238e+08</td>\n",
              "      <td>-4.730979e+08</td>\n",
              "      <td>-5.155367e+08</td>\n",
              "      <td>-4.985555e+08</td>\n",
              "      <td>-4.923911e+08</td>\n",
              "      <td>1.459294e+07</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>1.236572</td>\n",
              "      <td>0.036875</td>\n",
              "      <td>0.019325</td>\n",
              "      <td>0.000252</td>\n",
              "      <td>8</td>\n",
              "      <td>30</td>\n",
              "      <td>NaN</td>\n",
              "      <td>{'max_features': 8, 'n_estimators': 30}</td>\n",
              "      <td>-2.357390e+09</td>\n",
              "      <td>-2.546640e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.468328e+09</td>\n",
              "      <td>1.091662e+08</td>\n",
              "      <td>1</td>\n",
              "      <td>-3.841658e+08</td>\n",
              "      <td>-3.744500e+08</td>\n",
              "      <td>-3.773239e+08</td>\n",
              "      <td>-3.882250e+08</td>\n",
              "      <td>-3.810005e+08</td>\n",
              "      <td>-3.810330e+08</td>\n",
              "      <td>4.871017e+06</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>0.064666</td>\n",
              "      <td>0.001042</td>\n",
              "      <td>0.002780</td>\n",
              "      <td>0.000240</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 2, 'n_est...</td>\n",
              "      <td>-3.785816e+09</td>\n",
              "      <td>-4.166012e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.955790e+09</td>\n",
              "      <td>1.900964e+08</td>\n",
              "      <td>17</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>0.213941</td>\n",
              "      <td>0.000996</td>\n",
              "      <td>0.007956</td>\n",
              "      <td>0.000267</td>\n",
              "      <td>2</td>\n",
              "      <td>10</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 2, 'n_est...</td>\n",
              "      <td>-2.810721e+09</td>\n",
              "      <td>-3.107789e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.987516e+09</td>\n",
              "      <td>1.539234e+08</td>\n",
              "      <td>10</td>\n",
              "      <td>-6.056477e-02</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-2.967449e+00</td>\n",
              "      <td>-6.056027e-01</td>\n",
              "      <td>1.181156e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>0.090480</td>\n",
              "      <td>0.003167</td>\n",
              "      <td>0.002681</td>\n",
              "      <td>0.000082</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 3, 'n_est...</td>\n",
              "      <td>-3.618324e+09</td>\n",
              "      <td>-3.441527e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.536729e+09</td>\n",
              "      <td>7.795057e+07</td>\n",
              "      <td>15</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-6.072840e+01</td>\n",
              "      <td>-1.214568e+01</td>\n",
              "      <td>2.429136e+01</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>0.286396</td>\n",
              "      <td>0.004578</td>\n",
              "      <td>0.008019</td>\n",
              "      <td>0.000384</td>\n",
              "      <td>3</td>\n",
              "      <td>10</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 3, 'n_est...</td>\n",
              "      <td>-2.757999e+09</td>\n",
              "      <td>-2.851737e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.779924e+09</td>\n",
              "      <td>6.286720e+07</td>\n",
              "      <td>7</td>\n",
              "      <td>-2.089484e+01</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-5.465556e+00</td>\n",
              "      <td>-5.272080e+00</td>\n",
              "      <td>8.093117e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>0.109239</td>\n",
              "      <td>0.002999</td>\n",
              "      <td>0.003399</td>\n",
              "      <td>0.001579</td>\n",
              "      <td>4</td>\n",
              "      <td>3</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 4, 'n_est...</td>\n",
              "      <td>-3.134040e+09</td>\n",
              "      <td>-3.559375e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-3.305166e+09</td>\n",
              "      <td>1.879165e+08</td>\n",
              "      <td>12</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "      <td>0.000000e+00</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>0.370459</td>\n",
              "      <td>0.017424</td>\n",
              "      <td>0.007863</td>\n",
              "      <td>0.000056</td>\n",
              "      <td>4</td>\n",
              "      <td>10</td>\n",
              "      <td>False</td>\n",
              "      <td>{'bootstrap': False, 'max_features': 4, 'n_est...</td>\n",
              "      <td>-2.525578e+09</td>\n",
              "      <td>-2.710011e+09</td>\n",
              "      <td>...</td>\n",
              "      <td>-2.601969e+09</td>\n",
              "      <td>1.088048e+08</td>\n",
              "      <td>4</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-1.514119e-02</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-0.000000e+00</td>\n",
              "      <td>-3.028238e-03</td>\n",
              "      <td>6.056477e-03</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>18 rows × 23 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "    mean_fit_time  std_fit_time  mean_score_time  std_score_time  \\\n",
              "0        0.050905      0.004097         0.002766        0.000256   \n",
              "1        0.143706      0.002170         0.007205        0.000304   \n",
              "2        0.410306      0.004403         0.019903        0.000964   \n",
              "3        0.069762      0.000987         0.002409        0.000080   \n",
              "4        0.227188      0.001444         0.006829        0.000090   \n",
              "5        0.711381      0.038618         0.020686        0.001864   \n",
              "6        0.094580      0.003861         0.002426        0.000118   \n",
              "7        0.311034      0.005247         0.006980        0.000283   \n",
              "8        0.979656      0.048790         0.021028        0.001812   \n",
              "9        0.118484      0.001009         0.002239        0.000068   \n",
              "10       0.401726      0.005465         0.007028        0.000345   \n",
              "11       1.236572      0.036875         0.019325        0.000252   \n",
              "12       0.064666      0.001042         0.002780        0.000240   \n",
              "13       0.213941      0.000996         0.007956        0.000267   \n",
              "14       0.090480      0.003167         0.002681        0.000082   \n",
              "15       0.286396      0.004578         0.008019        0.000384   \n",
              "16       0.109239      0.002999         0.003399        0.001579   \n",
              "17       0.370459      0.017424         0.007863        0.000056   \n",
              "\n",
              "   param_max_features param_n_estimators param_bootstrap  \\\n",
              "0                   2                  3             NaN   \n",
              "1                   2                 10             NaN   \n",
              "2                   2                 30             NaN   \n",
              "3                   4                  3             NaN   \n",
              "4                   4                 10             NaN   \n",
              "5                   4                 30             NaN   \n",
              "6                   6                  3             NaN   \n",
              "7                   6                 10             NaN   \n",
              "8                   6                 30             NaN   \n",
              "9                   8                  3             NaN   \n",
              "10                  8                 10             NaN   \n",
              "11                  8                 30             NaN   \n",
              "12                  2                  3           False   \n",
              "13                  2                 10           False   \n",
              "14                  3                  3           False   \n",
              "15                  3                 10           False   \n",
              "16                  4                  3           False   \n",
              "17                  4                 10           False   \n",
              "\n",
              "                                               params  split0_test_score  \\\n",
              "0              {'max_features': 2, 'n_estimators': 3}      -3.837622e+09   \n",
              "1             {'max_features': 2, 'n_estimators': 10}      -3.047771e+09   \n",
              "2             {'max_features': 2, 'n_estimators': 30}      -2.689185e+09   \n",
              "3              {'max_features': 4, 'n_estimators': 3}      -3.730181e+09   \n",
              "4             {'max_features': 4, 'n_estimators': 10}      -2.666283e+09   \n",
              "5             {'max_features': 4, 'n_estimators': 30}      -2.387153e+09   \n",
              "6              {'max_features': 6, 'n_estimators': 3}      -3.119657e+09   \n",
              "7             {'max_features': 6, 'n_estimators': 10}      -2.549663e+09   \n",
              "8             {'max_features': 6, 'n_estimators': 30}      -2.370010e+09   \n",
              "9              {'max_features': 8, 'n_estimators': 3}      -3.353504e+09   \n",
              "10            {'max_features': 8, 'n_estimators': 10}      -2.571970e+09   \n",
              "11            {'max_features': 8, 'n_estimators': 30}      -2.357390e+09   \n",
              "12  {'bootstrap': False, 'max_features': 2, 'n_est...      -3.785816e+09   \n",
              "13  {'bootstrap': False, 'max_features': 2, 'n_est...      -2.810721e+09   \n",
              "14  {'bootstrap': False, 'max_features': 3, 'n_est...      -3.618324e+09   \n",
              "15  {'bootstrap': False, 'max_features': 3, 'n_est...      -2.757999e+09   \n",
              "16  {'bootstrap': False, 'max_features': 4, 'n_est...      -3.134040e+09   \n",
              "17  {'bootstrap': False, 'max_features': 4, 'n_est...      -2.525578e+09   \n",
              "\n",
              "    split1_test_score  ...  mean_test_score  std_test_score  rank_test_score  \\\n",
              "0       -4.147108e+09  ...    -4.053756e+09    1.519591e+08               18   \n",
              "1       -3.254861e+09  ...    -3.094374e+09    1.327062e+08               11   \n",
              "2       -3.021086e+09  ...    -2.849913e+09    1.626875e+08                9   \n",
              "3       -3.786886e+09  ...    -3.716847e+09    1.631510e+08               16   \n",
              "4       -2.784511e+09  ...    -2.781618e+09    1.268607e+08                8   \n",
              "5       -2.588448e+09  ...    -2.537883e+09    1.214614e+08                3   \n",
              "6       -3.586319e+09  ...    -3.441458e+09    1.893056e+08               14   \n",
              "7       -2.782039e+09  ...    -2.704645e+09    1.471569e+08                6   \n",
              "8       -2.583638e+09  ...    -2.514673e+09    1.285080e+08                2   \n",
              "9       -3.348552e+09  ...    -3.348850e+09    1.241939e+08               13   \n",
              "10      -2.718994e+09  ...    -2.674041e+09    1.392777e+08                5   \n",
              "11      -2.546640e+09  ...    -2.468328e+09    1.091662e+08                1   \n",
              "12      -4.166012e+09  ...    -3.955790e+09    1.900964e+08               17   \n",
              "13      -3.107789e+09  ...    -2.987516e+09    1.539234e+08               10   \n",
              "14      -3.441527e+09  ...    -3.536729e+09    7.795057e+07               15   \n",
              "15      -2.851737e+09  ...    -2.779924e+09    6.286720e+07                7   \n",
              "16      -3.559375e+09  ...    -3.305166e+09    1.879165e+08               12   \n",
              "17      -2.710011e+09  ...    -2.601969e+09    1.088048e+08                4   \n",
              "\n",
              "    split0_train_score  split1_train_score  split2_train_score  \\\n",
              "0        -1.064113e+09       -1.105142e+09       -1.116550e+09   \n",
              "1        -5.927175e+08       -5.870952e+08       -5.776964e+08   \n",
              "2        -4.381089e+08       -4.391272e+08       -4.371702e+08   \n",
              "3        -9.865163e+08       -1.012565e+09       -9.169425e+08   \n",
              "4        -5.097115e+08       -5.162820e+08       -4.962893e+08   \n",
              "5        -3.838835e+08       -3.880268e+08       -3.790867e+08   \n",
              "6        -9.245343e+08       -8.886939e+08       -9.353135e+08   \n",
              "7        -4.980344e+08       -5.045869e+08       -4.994664e+08   \n",
              "8        -3.838538e+08       -3.804711e+08       -3.805218e+08   \n",
              "9        -9.228123e+08       -8.553031e+08       -8.603321e+08   \n",
              "10       -4.932416e+08       -4.815238e+08       -4.730979e+08   \n",
              "11       -3.841658e+08       -3.744500e+08       -3.773239e+08   \n",
              "12       -0.000000e+00       -0.000000e+00       -0.000000e+00   \n",
              "13       -6.056477e-02       -0.000000e+00       -0.000000e+00   \n",
              "14       -0.000000e+00       -0.000000e+00       -0.000000e+00   \n",
              "15       -2.089484e+01       -0.000000e+00       -0.000000e+00   \n",
              "16       -0.000000e+00       -0.000000e+00       -0.000000e+00   \n",
              "17       -0.000000e+00       -1.514119e-02       -0.000000e+00   \n",
              "\n",
              "    split3_train_score  split4_train_score  mean_train_score  std_train_score  \n",
              "0        -1.112342e+09       -1.129650e+09     -1.105559e+09     2.220402e+07  \n",
              "1        -5.716332e+08       -5.802501e+08     -5.818785e+08     7.345821e+06  \n",
              "2        -4.376955e+08       -4.452654e+08     -4.394734e+08     2.966320e+06  \n",
              "3        -1.037400e+09       -9.707739e+08     -9.848396e+08     4.084607e+07  \n",
              "4        -5.436192e+08       -5.160297e+08     -5.163863e+08     1.542862e+07  \n",
              "5        -4.040957e+08       -3.845520e+08     -3.879289e+08     8.571233e+06  \n",
              "6        -9.009801e+08       -8.624664e+08     -9.023976e+08     2.591445e+07  \n",
              "7        -4.990325e+08       -5.055542e+08     -5.013349e+08     3.100456e+06  \n",
              "8        -3.856095e+08       -3.901917e+08     -3.841296e+08     3.617057e+06  \n",
              "9        -8.881964e+08       -9.151287e+08     -8.883545e+08     2.750227e+07  \n",
              "10       -5.155367e+08       -4.985555e+08     -4.923911e+08     1.459294e+07  \n",
              "11       -3.882250e+08       -3.810005e+08     -3.810330e+08     4.871017e+06  \n",
              "12       -0.000000e+00       -0.000000e+00      0.000000e+00     0.000000e+00  \n",
              "13       -0.000000e+00       -2.967449e+00     -6.056027e-01     1.181156e+00  \n",
              "14       -0.000000e+00       -6.072840e+01     -1.214568e+01     2.429136e+01  \n",
              "15       -0.000000e+00       -5.465556e+00     -5.272080e+00     8.093117e+00  \n",
              "16       -0.000000e+00       -0.000000e+00      0.000000e+00     0.000000e+00  \n",
              "17       -0.000000e+00       -0.000000e+00     -3.028238e-03     6.056477e-03  \n",
              "\n",
              "[18 rows x 23 columns]"
            ]
          },
          "execution_count": 103,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "pd.DataFrame(grid_search.cv_results_)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8g3LELTBemy4"
      },
      "source": [
        "## Randomized Search"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H3qMebwCemy4",
        "outputId": "51ec23d4-fc00-4bd7-cac4-8439238617bf"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5, estimator=RandomForestRegressor(random_state=42),\n",
              "                   param_distributions={'max_features': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fd1b96682d0>,\n",
              "                                        'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fd1b9668b10>},\n",
              "                   random_state=42, scoring='neg_mean_squared_error')"
            ]
          },
          "execution_count": 104,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import randint\n",
        "\n",
        "param_distribs = {\n",
        "        'n_estimators': randint(low=1, high=200),\n",
        "        'max_features': randint(low=1, high=8),\n",
        "    }\n",
        "\n",
        "forest_reg = RandomForestRegressor(random_state=42)\n",
        "rnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,\n",
        "                                n_iter=10, cv=5, scoring='neg_mean_squared_error', random_state=42)\n",
        "rnd_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "UqhiA72semy4",
        "outputId": "87072b06-0f3b-4c24-acad-d2496c61d924"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "49150.70756927707 {'max_features': 7, 'n_estimators': 180}\n",
            "51389.889203389284 {'max_features': 5, 'n_estimators': 15}\n",
            "50796.155224308866 {'max_features': 3, 'n_estimators': 72}\n",
            "50835.13360315349 {'max_features': 5, 'n_estimators': 21}\n",
            "49280.9449827171 {'max_features': 7, 'n_estimators': 122}\n",
            "50774.90662363929 {'max_features': 3, 'n_estimators': 75}\n",
            "50682.78888164288 {'max_features': 3, 'n_estimators': 88}\n",
            "49608.99608105296 {'max_features': 5, 'n_estimators': 100}\n",
            "50473.61930350219 {'max_features': 3, 'n_estimators': 150}\n",
            "64429.84143294435 {'max_features': 5, 'n_estimators': 2}\n"
          ]
        }
      ],
      "source": [
        "cvres = rnd_search.cv_results_\n",
        "for mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n",
        "    print(np.sqrt(-mean_score), params)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wz6E0bqpemy4"
      },
      "source": [
        "## Analyze the Best Models and Their Errors"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "mv_JLrP6emy4",
        "outputId": "3e941b43-ebcd-496c-94a0-b7d4f47d4265"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([7.33442355e-02, 6.29090705e-02, 4.11437985e-02, 1.46726854e-02,\n",
              "       1.41064835e-02, 1.48742809e-02, 1.42575993e-02, 3.66158981e-01,\n",
              "       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,\n",
              "       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03])"
            ]
          },
          "execution_count": 106,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "feature_importances = grid_search.best_estimator_.feature_importances_\n",
        "feature_importances"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "IKBXBIp0emy4",
        "outputId": "79d44e40-8785-4b49-8d34-2a658f657850"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[(0.36615898061813423, 'median_income'),\n",
              " (0.16478099356159054, 'INLAND'),\n",
              " (0.10879295677551575, 'pop_per_hhold'),\n",
              " (0.07334423551601243, 'longitude'),\n",
              " (0.06290907048262032, 'latitude'),\n",
              " (0.056419179181954014, 'rooms_per_hhold'),\n",
              " (0.053351077347675815, 'bedrooms_per_room'),\n",
              " (0.04114379847872964, 'housing_median_age'),\n",
              " (0.014874280890402769, 'population'),\n",
              " (0.014672685420543239, 'total_rooms'),\n",
              " (0.014257599323407808, 'households'),\n",
              " (0.014106483453584104, 'total_bedrooms'),\n",
              " (0.010311488326303788, '<1H OCEAN'),\n",
              " (0.0028564746373201584, 'NEAR OCEAN'),\n",
              " (0.0019604155994780706, 'NEAR BAY'),\n",
              " (6.0280386727366e-05, 'ISLAND')]"
            ]
          },
          "execution_count": 107,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "extra_attribs = [\"rooms_per_hhold\", \"pop_per_hhold\", \"bedrooms_per_room\"]\n",
        "#cat_encoder = cat_pipeline.named_steps[\"cat_encoder\"] # old solution\n",
        "cat_encoder = full_pipeline.named_transformers_[\"cat\"]\n",
        "cat_one_hot_attribs = list(cat_encoder.categories_[0])\n",
        "attributes = num_attribs + extra_attribs + cat_one_hot_attribs\n",
        "sorted(zip(feature_importances, attributes), reverse=True)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fCtLXfBiemy5"
      },
      "source": [
        "## Evaluate Your System on the Test Set"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XUTYQh-Kemy5"
      },
      "outputs": [],
      "source": [
        "final_model = grid_search.best_estimator_\n",
        "\n",
        "X_test = strat_test_set.drop(\"median_house_value\", axis=1)\n",
        "y_test = strat_test_set[\"median_house_value\"].copy()\n",
        "\n",
        "X_test_prepared = full_pipeline.transform(X_test)\n",
        "final_predictions = final_model.predict(X_test_prepared)\n",
        "\n",
        "final_mse = mean_squared_error(y_test, final_predictions)\n",
        "final_rmse = np.sqrt(final_mse)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "p6fvcQIzemy5",
        "outputId": "431e7fc8-efe2-4474-e9eb-8558bce7ec7a"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "47730.22690385927"
            ]
          },
          "execution_count": 109,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "final_rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m9ExTEHIemy5"
      },
      "source": [
        "We can compute a 95% confidence interval for the test RMSE:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "QPoNtC5vemy5",
        "outputId": "04b98bfb-0ee1-45ab-e29f-8e840af4ae59"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([45685.10470776, 49691.25001878])"
            ]
          },
          "execution_count": 110,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from scipy import stats\n",
        "\n",
        "confidence = 0.95\n",
        "squared_errors = (final_predictions - y_test) ** 2\n",
        "np.sqrt(stats.t.interval(confidence, len(squared_errors) - 1,\n",
        "                         loc=squared_errors.mean(),\n",
        "                         scale=stats.sem(squared_errors)))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fVO5tWBYemy5"
      },
      "source": [
        "We could compute the interval manually like this:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wxWZ6dCdemy5",
        "outputId": "9bb1d6cb-0c39-4e89-a4c8-37e419595b81"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(45685.10470776014, 49691.25001877871)"
            ]
          },
          "execution_count": 111,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "m = len(squared_errors)\n",
        "mean = squared_errors.mean()\n",
        "tscore = stats.t.ppf((1 + confidence) / 2, df=m - 1)\n",
        "tmargin = tscore * squared_errors.std(ddof=1) / np.sqrt(m)\n",
        "np.sqrt(mean - tmargin), np.sqrt(mean + tmargin)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wiLggxxIemy5"
      },
      "source": [
        "Alternatively, we could use a z-scores rather than t-scores:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "jHRxpQxgemy5",
        "outputId": "063da5d7-9b4d-4a08-f401-36352745801f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "(45685.717918136594, 49690.68623889426)"
            ]
          },
          "execution_count": 112,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "zscore = stats.norm.ppf((1 + confidence) / 2)\n",
        "zmargin = zscore * squared_errors.std(ddof=1) / np.sqrt(m)\n",
        "np.sqrt(mean - zmargin), np.sqrt(mean + zmargin)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YChczyDSemy5"
      },
      "source": [
        "# Extra material"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6kEMYGSGemy5"
      },
      "source": [
        "## A full pipeline with both preparation and prediction"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eRmxmxz8emy5",
        "outputId": "da2f5f82-d8bb-4a30-ac4e-a9709e20f5ba"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([210644.60459286, 317768.80697211, 210956.43331178,  59218.98886849,\n",
              "       189747.55849879])"
            ]
          },
          "execution_count": 113,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "full_pipeline_with_predictor = Pipeline([\n",
        "        (\"preparation\", full_pipeline),\n",
        "        (\"linear\", LinearRegression())\n",
        "    ])\n",
        "\n",
        "full_pipeline_with_predictor.fit(housing, housing_labels)\n",
        "full_pipeline_with_predictor.predict(some_data)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K5TCowqBemy5"
      },
      "source": [
        "## Model persistence using joblib"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "m8DDHdplemy5"
      },
      "outputs": [],
      "source": [
        "my_model = full_pipeline_with_predictor"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "BTTap8gDemy5"
      },
      "outputs": [],
      "source": [
        "import joblib\n",
        "joblib.dump(my_model, \"my_model.pkl\") # DIFF\n",
        "#...\n",
        "my_model_loaded = joblib.load(\"my_model.pkl\") # DIFF"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cklH7Cn6emy5"
      },
      "source": [
        "## Example SciPy distributions for `RandomizedSearchCV`"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zZI8-4FMemy5",
        "outputId": "45d113f7-d3c6-4236-c0e5-7d9c161571f0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "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\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "from scipy.stats import geom, expon\n",
        "geom_distrib=geom(0.5).rvs(10000, random_state=42)\n",
        "expon_distrib=expon(scale=1).rvs(10000, random_state=42)\n",
        "plt.hist(geom_distrib, bins=50)\n",
        "plt.show()\n",
        "plt.hist(expon_distrib, bins=50)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "a7YsxRjVemy6"
      },
      "source": [
        "# Exercise solutions"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0Cudq9onemy6"
      },
      "source": [
        "## 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4HDjFyK4emy6"
      },
      "source": [
        "Question: Try a Support Vector Machine regressor (`sklearn.svm.SVR`), with various hyperparameters such as `kernel=\"linear\"` (with various values for the `C` hyperparameter) or `kernel=\"rbf\"` (with various values for the `C` and `gamma` hyperparameters). Don't worry about what these hyperparameters mean for now. How does the best `SVR` predictor perform?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "TsN1KDnjemy6"
      },
      "source": [
        "**Warning**: the following cell may take close to 30 minutes to run, or more depending on your hardware."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ebsYo4j9emy6",
        "outputId": "c25f59fb-9919-4529-e59a-d23c9ffad793"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
            "[CV] C=10.0, kernel=linear ...........................................\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV] ............................ C=10.0, kernel=linear, total=   3.9s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    3.9s remaining:    0.0s\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV] ............................ C=10.0, kernel=linear, total=   3.9s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=10.0, kernel=linear, total=   4.6s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=10.0, kernel=linear, total=   4.2s\n",
            "[CV] C=10.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=10.0, kernel=linear, total=   4.5s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.1s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.2s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.3s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   4.0s\n",
            "[CV] C=30.0, kernel=linear ...........................................\n",
            "[CV] ............................ C=30.0, kernel=linear, total=   3.9s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   3.9s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   4.0s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   4.0s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   4.0s\n",
            "[CV] C=100.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=100.0, kernel=linear, total=   3.9s\n",
            "[CV] C=300.0, kernel=linear ..........................................\n",
            "[CV] ........................... C=300.0, kernel=linear, total=   4.1s\n",
            "<<434 more lines>>\n",
            "[CV] C=1000.0, gamma=0.1, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.1, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.1, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.1, kernel=rbf, total=   6.8s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=0.3, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=0.3, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.8s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=1.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=1.0, kernel=rbf, total=   6.7s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.4s\n",
            "[CV] C=1000.0, gamma=3.0, kernel=rbf .................................\n",
            "[CV] .................. C=1000.0, gamma=3.0, kernel=rbf, total=   7.3s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done 250 out of 250 | elapsed: 26.4min finished\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5, estimator=SVR(),\n",
              "             param_grid=[{'C': [10.0, 30.0, 100.0, 300.0, 1000.0, 3000.0,\n",
              "                                10000.0, 30000.0],\n",
              "                          'kernel': ['linear']},\n",
              "                         {'C': [1.0, 3.0, 10.0, 30.0, 100.0, 300.0, 1000.0],\n",
              "                          'gamma': [0.01, 0.03, 0.1, 0.3, 1.0, 3.0],\n",
              "                          'kernel': ['rbf']}],\n",
              "             scoring='neg_mean_squared_error', verbose=2)"
            ]
          },
          "execution_count": 117,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import GridSearchCV\n",
        "\n",
        "param_grid = [\n",
        "        {'kernel': ['linear'], 'C': [10., 30., 100., 300., 1000., 3000., 10000., 30000.0]},\n",
        "        {'kernel': ['rbf'], 'C': [1.0, 3.0, 10., 30., 100., 300., 1000.0],\n",
        "         'gamma': [0.01, 0.03, 0.1, 0.3, 1.0, 3.0]},\n",
        "    ]\n",
        "\n",
        "svm_reg = SVR()\n",
        "grid_search = GridSearchCV(svm_reg, param_grid, cv=5, scoring='neg_mean_squared_error', verbose=2)\n",
        "grid_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "u8rk20d4emy6"
      },
      "source": [
        "The best model achieves the following score (evaluated using 5-fold cross validation):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "G7wt5lF6emy6",
        "outputId": "bc676c18-ec14-4b5b-b37b-9d8938183db6"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "70363.84006944533"
            ]
          },
          "execution_count": 118,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "negative_mse = grid_search.best_score_\n",
        "rmse = np.sqrt(-negative_mse)\n",
        "rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SC_CZ2nLemy6"
      },
      "source": [
        "That's much worse than the `RandomForestRegressor`. Let's check the best hyperparameters found:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GEmFxsFsemy6",
        "outputId": "8670336d-bdf1-41b1-bca2-95c5e98ee842"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'C': 30000.0, 'kernel': 'linear'}"
            ]
          },
          "execution_count": 119,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search.best_params_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "D-Z9acdCemy6"
      },
      "source": [
        "The linear kernel seems better than the RBF kernel. Notice that the value of `C` is the maximum tested value. When this happens you definitely want to launch the grid search again with higher values for `C` (removing the smallest values), because it is likely that higher values of `C` will be better."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "oJGp3FETemy6"
      },
      "source": [
        "## 2."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mVIL3d9Oemy6"
      },
      "source": [
        "Question: Try replacing `GridSearchCV` with `RandomizedSearchCV`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "CctabXnIemy6"
      },
      "source": [
        "**Warning**: the following cell may take close to 45 minutes to run, or more depending on your hardware."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "VnXIsrUcemy6",
        "outputId": "b2be3698-6eb3-43c4-d2c9-d861f57851ff"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 50 candidates, totalling 250 fits\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.2s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    4.2s remaining:    0.0s\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.0s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n",
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.5s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n",
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.5s\n",
            "[CV] C=629.782329591372, gamma=3.010121430917521, kernel=linear ......\n",
            "[CV]  C=629.782329591372, gamma=3.010121430917521, kernel=linear, total=   4.3s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   8.6s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   9.1s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   8.8s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   8.9s\n",
            "[CV] C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf ......\n",
            "[CV]  C=26290.206464300216, gamma=0.9084469696321253, kernel=rbf, total=   9.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   6.9s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf .....\n",
            "[CV]  C=84.14107900575871, gamma=0.059838768608680676, kernel=rbf, total=   7.0s\n",
            "[CV] C=432.37884813148855, gamma=0.15416196746656105, kernel=linear ..\n",
            "[CV]  C=432.37884813148855, gamma=0.15416196746656105, kernel=linear, total=   4.6s\n",
            "<<434 more lines>>\n",
            "[CV] C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf .......\n",
            "[CV]  C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf, total=  25.2s\n",
            "[CV] C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf .......\n",
            "[CV]  C=61217.04421344494, gamma=1.6279689407405564, kernel=rbf, total=  23.2s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.7s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.7s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.7s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.8s\n",
            "[CV] C=926.9787684096649, gamma=2.147979593060577, kernel=rbf ........\n",
            "[CV]  C=926.9787684096649, gamma=2.147979593060577, kernel=rbf, total=   5.6s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=  10.0s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=   9.7s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=   8.9s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=  10.4s\n",
            "[CV] C=33946.157064934, gamma=2.2642426492862313, kernel=linear ......\n",
            "[CV]  C=33946.157064934, gamma=2.2642426492862313, kernel=linear, total=   9.3s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  25.8s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  18.5s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  28.3s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  20.8s\n",
            "[CV] C=84789.82947739525, gamma=0.3176359085304841, kernel=linear ....\n",
            "[CV]  C=84789.82947739525, gamma=0.3176359085304841, kernel=linear, total=  15.6s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done 250 out of 250 | elapsed: 44.0min finished\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "RandomizedSearchCV(cv=5, estimator=SVR(), n_iter=50,\n",
              "                   param_distributions={'C': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f9bd002c790>,\n",
              "                                        'gamma': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7f9bd002cb10>,\n",
              "                                        'kernel': ['linear', 'rbf']},\n",
              "                   random_state=42, scoring='neg_mean_squared_error',\n",
              "                   verbose=2)"
            ]
          },
          "execution_count": 120,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "from sklearn.model_selection import RandomizedSearchCV\n",
        "from scipy.stats import expon, reciprocal\n",
        "\n",
        "# see https://docs.scipy.org/doc/scipy/reference/stats.html\n",
        "# for `expon()` and `reciprocal()` documentation and more probability distribution functions.\n",
        "\n",
        "# Note: gamma is ignored when kernel is \"linear\"\n",
        "param_distribs = {\n",
        "        'kernel': ['linear', 'rbf'],\n",
        "        'C': reciprocal(20, 200000),\n",
        "        'gamma': expon(scale=1.0),\n",
        "    }\n",
        "\n",
        "svm_reg = SVR()\n",
        "rnd_search = RandomizedSearchCV(svm_reg, param_distributions=param_distribs,\n",
        "                                n_iter=50, cv=5, scoring='neg_mean_squared_error',\n",
        "                                verbose=2, random_state=42)\n",
        "rnd_search.fit(housing_prepared, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eV86MYMbemy6"
      },
      "source": [
        "The best model achieves the following score (evaluated using 5-fold cross validation):"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "6WPRAttlemy6",
        "outputId": "67e2ccc0-ddfe-4164-d645-ac801faed492"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "54767.960710084146"
            ]
          },
          "execution_count": 121,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "negative_mse = rnd_search.best_score_\n",
        "rmse = np.sqrt(-negative_mse)\n",
        "rmse"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ISsrewILemy6"
      },
      "source": [
        "Now this is much closer to the performance of the `RandomForestRegressor` (but not quite there yet). Let's check the best hyperparameters found:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "roG5cek9emy6",
        "outputId": "bf901904-811f-4d41-a8db-8110a6d52b0f"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'C': 157055.10989448498, 'gamma': 0.26497040005002437, 'kernel': 'rbf'}"
            ]
          },
          "execution_count": 122,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "rnd_search.best_params_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Y3JBXjcTemy7"
      },
      "source": [
        "This time the search found a good set of hyperparameters for the RBF kernel. Randomized search tends to find better hyperparameters than grid search in the same amount of time."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RgqkinA1emy7"
      },
      "source": [
        "Let's look at the exponential distribution we used, with `scale=1.0`. Note that some samples are much larger or smaller than 1.0, but when you look at the log of the distribution, you can see that most values are actually concentrated roughly in the range of exp(-2) to exp(+2), which is about 0.1 to 7.4."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "8vgWlI90emy7",
        "outputId": "20b971bb-a7c2-4c88-e506-15878c77652b"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "expon_distrib = expon(scale=1.)\n",
        "samples = expon_distrib.rvs(10000, random_state=42)\n",
        "plt.figure(figsize=(10, 4))\n",
        "plt.subplot(121)\n",
        "plt.title(\"Exponential distribution (scale=1.0)\")\n",
        "plt.hist(samples, bins=50)\n",
        "plt.subplot(122)\n",
        "plt.title(\"Log of this distribution\")\n",
        "plt.hist(np.log(samples), bins=50)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OYc43Znwemy7"
      },
      "source": [
        "The distribution we used for `C` looks quite different: the scale of the samples is picked from a uniform distribution within a given range, which is why the right graph, which represents the log of the samples, looks roughly constant. This distribution is useful when you don't have a clue of what the target scale is:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0bnDPqVsemy7",
        "outputId": "0f6bfacb-c174-4519-e7e4-b6de229d1281"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x288 with 2 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "reciprocal_distrib = reciprocal(20, 200000)\n",
        "samples = reciprocal_distrib.rvs(10000, random_state=42)\n",
        "plt.figure(figsize=(10, 4))\n",
        "plt.subplot(121)\n",
        "plt.title(\"Reciprocal distribution (scale=1.0)\")\n",
        "plt.hist(samples, bins=50)\n",
        "plt.subplot(122)\n",
        "plt.title(\"Log of this distribution\")\n",
        "plt.hist(np.log(samples), bins=50)\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5Ur2ufd-emy7"
      },
      "source": [
        "The reciprocal distribution is useful when you have no idea what the scale of the hyperparameter should be (indeed, as you can see on the figure on the right, all scales are equally likely, within the given range), whereas the exponential distribution is best when you know (more or less) what the scale of the hyperparameter should be."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "l2zg3893emy7"
      },
      "source": [
        "## 3."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "vtJQpHd0emy7"
      },
      "source": [
        "Question: Try adding a transformer in the preparation pipeline to select only the most important attributes."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "M2HNyxqaemy7"
      },
      "outputs": [],
      "source": [
        "from sklearn.base import BaseEstimator, TransformerMixin\n",
        "\n",
        "def indices_of_top_k(arr, k):\n",
        "    return np.sort(np.argpartition(np.array(arr), -k)[-k:])\n",
        "\n",
        "class TopFeatureSelector(BaseEstimator, TransformerMixin):\n",
        "    def __init__(self, feature_importances, k):\n",
        "        self.feature_importances = feature_importances\n",
        "        self.k = k\n",
        "    def fit(self, X, y=None):\n",
        "        self.feature_indices_ = indices_of_top_k(self.feature_importances, self.k)\n",
        "        return self\n",
        "    def transform(self, X):\n",
        "        return X[:, self.feature_indices_]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IESxScFZemy7"
      },
      "source": [
        "Note: this feature selector assumes that you have already computed the feature importances somehow (for example using a `RandomForestRegressor`). You may be tempted to compute them directly in the `TopFeatureSelector`'s `fit()` method, however this would likely slow down grid/randomized search since the feature importances would have to be computed for every hyperparameter combination (unless you implement some sort of cache)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "f9XRr8Nsemy7"
      },
      "source": [
        "Let's define the number of top features we want to keep:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "4LfIcCEHemy7"
      },
      "outputs": [],
      "source": [
        "k = 5"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pyYx_UZ6emy7"
      },
      "source": [
        "Now let's look for the indices of the top k features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "H2oeKLnRemy7",
        "outputId": "59f4fd68-52b5-41c4-98c1-62d0374b7150"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 0,  1,  7,  9, 12])"
            ]
          },
          "execution_count": 127,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "top_k_feature_indices = indices_of_top_k(feature_importances, k)\n",
        "top_k_feature_indices"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XHGkvZQ6emy8",
        "outputId": "84c2da86-8dcb-412b-eb18-bc520876e836"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array(['longitude', 'latitude', 'median_income', 'pop_per_hhold',\n",
              "       'INLAND'], dtype='<U18')"
            ]
          },
          "execution_count": 128,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.array(attributes)[top_k_feature_indices]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GVeVK11Lemy8"
      },
      "source": [
        "Let's double check that these are indeed the top k features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "wTEcv9Ftemy8",
        "outputId": "cc97cc90-de64-43b7-afaf-47b60e83d136"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "[(0.36615898061813423, 'median_income'),\n",
              " (0.16478099356159054, 'INLAND'),\n",
              " (0.10879295677551575, 'pop_per_hhold'),\n",
              " (0.07334423551601243, 'longitude'),\n",
              " (0.06290907048262032, 'latitude')]"
            ]
          },
          "execution_count": 129,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "sorted(zip(feature_importances, attributes), reverse=True)[:k]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kgT3YzpGemy8"
      },
      "source": [
        "Looking good... Now let's create a new pipeline that runs the previously defined preparation pipeline, and adds top k feature selection:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "2C0rukDXemy8"
      },
      "outputs": [],
      "source": [
        "preparation_and_feature_selection_pipeline = Pipeline([\n",
        "    ('preparation', full_pipeline),\n",
        "    ('feature_selection', TopFeatureSelector(feature_importances, k))\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Oanqxy14emy8"
      },
      "outputs": [],
      "source": [
        "housing_prepared_top_k_features = preparation_and_feature_selection_pipeline.fit_transform(housing)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "5bDSPyOcemy8"
      },
      "source": [
        "Let's look at the features of the first 3 instances:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "hXrXRHnuemy8",
        "outputId": "e5e7542d-df3a-4993-d681-bb2b308af5d0"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962, -0.61493744, -0.08649871,  0.        ],\n",
              "       [-1.17602483,  0.6596948 ,  1.33645936, -0.03353391,  0.        ],\n",
              "       [ 1.18684903, -1.34218285, -0.5320456 , -0.09240499,  0.        ]])"
            ]
          },
          "execution_count": 132,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared_top_k_features[0:3]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MWA4QAzoemy8"
      },
      "source": [
        "Now let's double check that these are indeed the top k features:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "sJk_K754emy8",
        "outputId": "dde64d63-595d-4ed3-cc76-d9b22bd53446"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([[-1.15604281,  0.77194962, -0.61493744, -0.08649871,  0.        ],\n",
              "       [-1.17602483,  0.6596948 ,  1.33645936, -0.03353391,  0.        ],\n",
              "       [ 1.18684903, -1.34218285, -0.5320456 , -0.09240499,  0.        ]])"
            ]
          },
          "execution_count": 133,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "housing_prepared[0:3, top_k_feature_indices]"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zUVjZRAMemy8"
      },
      "source": [
        "Works great!  :)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DV8IZvd9emy8"
      },
      "source": [
        "## 4."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kTUhS4h8emy8"
      },
      "source": [
        "Question: Try creating a single pipeline that does the full data preparation plus the final prediction."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "_Zhflf7Temy8"
      },
      "outputs": [],
      "source": [
        "prepare_select_and_predict_pipeline = Pipeline([\n",
        "    ('preparation', full_pipeline),\n",
        "    ('feature_selection', TopFeatureSelector(feature_importances, k)),\n",
        "    ('svm_reg', SVR(**rnd_search.best_params_))\n",
        "])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "rOvfUangemy8",
        "outputId": "5bd47168-d794-4d96-c6aa-a69c63168fb2"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "Pipeline(steps=[('preparation',\n",
              "                 ColumnTransformer(transformers=[('num',\n",
              "                                                  Pipeline(steps=[('imputer',\n",
              "                                                                   SimpleImputer(strategy='median')),\n",
              "                                                                  ('attribs_adder',\n",
              "                                                                   CombinedAttributesAdder()),\n",
              "                                                                  ('std_scaler',\n",
              "                                                                   StandardScaler())]),\n",
              "                                                  ['longitude', 'latitude',\n",
              "                                                   'housing_median_age',\n",
              "                                                   'total_rooms',\n",
              "                                                   'total_bedrooms',\n",
              "                                                   'population', 'households',\n",
              "                                                   'median_income']),\n",
              "                                                 ('cat', OneHotEncoder(...\n",
              "                 TopFeatureSelector(feature_importances=array([7.33442355e-02, 6.29090705e-02, 4.11437985e-02, 1.46726854e-02,\n",
              "       1.41064835e-02, 1.48742809e-02, 1.42575993e-02, 3.66158981e-01,\n",
              "       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,\n",
              "       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03]),\n",
              "                                    k=5)),\n",
              "                ('svm_reg',\n",
              "                 SVR(C=157055.10989448498, gamma=0.26497040005002437))])"
            ]
          },
          "execution_count": 135,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "prepare_select_and_predict_pipeline.fit(housing, housing_labels)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Zqelfn19emy8"
      },
      "source": [
        "Let's try the full pipeline on a few instances:"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "am4dIxrGemy8",
        "outputId": "088f12c2-0fcf-49bf-b640-d664361a71bb"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Predictions:\t [203214.28978849 371846.88152572 173295.65441612  47328.3970888 ]\n",
            "Labels:\t\t [286600.0, 340600.0, 196900.0, 46300.0]\n"
          ]
        }
      ],
      "source": [
        "some_data = housing.iloc[:4]\n",
        "some_labels = housing_labels.iloc[:4]\n",
        "\n",
        "print(\"Predictions:\\t\", prepare_select_and_predict_pipeline.predict(some_data))\n",
        "print(\"Labels:\\t\\t\", list(some_labels))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ZwJJVZ2Jemy9"
      },
      "source": [
        "Well, the full pipeline seems to work fine. Of course, the predictions are not fantastic: they would be better if we used the best `RandomForestRegressor` that we found earlier, rather than the best `SVR`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yqMaxChremy9"
      },
      "source": [
        "## 5."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "PFAu3TYKemy9"
      },
      "source": [
        "Question: Automatically explore some preparation options using `GridSearchCV`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x9qqhKWkemy9"
      },
      "source": [
        "**Warning**: the following cell may take close to 45 minutes to run, or more depending on your hardware."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "C7m4h9heemy9"
      },
      "source": [
        "**Note:** In the code below, I've set the `OneHotEncoder`'s `handle_unknown` hyperparameter to `'ignore'`, to avoid warnings during training. Without this, the `OneHotEncoder` would default to `handle_unknown='error'`, meaning that it would raise an error when transforming any data containing a category it didn't see during training. If we kept the default, then the `GridSearchCV` would run into errors during training when evaluating the folds in which not all the categories are in the training set. This is likely to happen since there's only one sample in the `'ISLAND'` category, and it may end up in the test set in some of the folds. So some folds would just be dropped by the `GridSearchCV`, and it's best to avoid that."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xWt_Ajx-emy9",
        "outputId": "50cedaa7-e60a-43c5-9fe4-a45c8b97d535"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Fitting 5 folds for each of 48 candidates, totalling 240 fits\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Using backend SequentialBackend with 1 concurrent workers.\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.2s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done   1 out of   1 | elapsed:    4.2s remaining:    0.0s\n"
          ]
        },
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   5.2s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=mean, total=   4.8s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   5.1s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.9s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.3s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=median, total=   4.2s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.6s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.3s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.4s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.7s\n",
            "[CV] feature_selection__k=1, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=1, preparation__num__imputer__strategy=most_frequent, total=   4.8s\n",
            "[CV] feature_selection__k=2, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=2, preparation__num__imputer__strategy=mean, total=   4.8s\n",
            "<<414 more lines>>\n",
            "[CV] feature_selection__k=15, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=15, preparation__num__imputer__strategy=most_frequent, total=  15.8s\n",
            "[CV] feature_selection__k=15, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=15, preparation__num__imputer__strategy=most_frequent, total=  19.8s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  17.9s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  19.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  18.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  19.1s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=mean \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=mean, total=  16.4s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  17.9s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  19.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  20.5s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  17.1s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=median \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=median, total=  20.3s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  16.7s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  19.4s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  17.2s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  17.5s\n",
            "[CV] feature_selection__k=16, preparation__num__imputer__strategy=most_frequent \n",
            "[CV]  feature_selection__k=16, preparation__num__imputer__strategy=most_frequent, total=  19.1s\n"
          ]
        },
        {
          "name": "stderr",
          "output_type": "stream",
          "text": [
            "[Parallel(n_jobs=1)]: Done 240 out of 240 | elapsed: 42.3min finished\n"
          ]
        },
        {
          "data": {
            "text/plain": [
              "GridSearchCV(cv=5,\n",
              "             estimator=Pipeline(steps=[('preparation',\n",
              "                                        ColumnTransformer(transformers=[('num',\n",
              "                                                                         Pipeline(steps=[('imputer',\n",
              "                                                                                          SimpleImputer(strategy='median')),\n",
              "                                                                                         ('attribs_adder',\n",
              "                                                                                          CombinedAttributesAdder()),\n",
              "                                                                                         ('std_scaler',\n",
              "                                                                                          StandardScaler())]),\n",
              "                                                                         ['longitude',\n",
              "                                                                          'latitude',\n",
              "                                                                          'housing_median_age',\n",
              "                                                                          'total_rooms',\n",
              "                                                                          'total_bedrooms',\n",
              "                                                                          'population',\n",
              "                                                                          'households',\n",
              "                                                                          'median_inc...\n",
              "       5.64191792e-02, 1.08792957e-01, 5.33510773e-02, 1.03114883e-02,\n",
              "       1.64780994e-01, 6.02803867e-05, 1.96041560e-03, 2.85647464e-03]),\n",
              "                                                           k=5)),\n",
              "                                       ('svm_reg',\n",
              "                                        SVR(C=157055.10989448498,\n",
              "                                            gamma=0.26497040005002437))]),\n",
              "             param_grid=[{'feature_selection__k': [1, 2, 3, 4, 5, 6, 7, 8, 9,\n",
              "                                                   10, 11, 12, 13, 14, 15, 16],\n",
              "                          'preparation__num__imputer__strategy': ['mean',\n",
              "                                                                  'median',\n",
              "                                                                  'most_frequent']}],\n",
              "             scoring='neg_mean_squared_error', verbose=2)"
            ]
          },
          "execution_count": 137,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "full_pipeline.named_transformers_[\"cat\"].handle_unknown = 'ignore'\n",
        "\n",
        "param_grid = [{\n",
        "    'preparation__num__imputer__strategy': ['mean', 'median', 'most_frequent'],\n",
        "    'feature_selection__k': list(range(1, len(feature_importances) + 1))\n",
        "}]\n",
        "\n",
        "grid_search_prep = GridSearchCV(prepare_select_and_predict_pipeline, param_grid, cv=5,\n",
        "                                scoring='neg_mean_squared_error', verbose=2)\n",
        "grid_search_prep.fit(housing, housing_labels)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "RPkKmkVOemy9",
        "outputId": "320eb0f1-b23c-463c-815d-ebffa6f02376"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "{'feature_selection__k': 15,\n",
              " 'preparation__num__imputer__strategy': 'most_frequent'}"
            ]
          },
          "execution_count": 138,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "grid_search_prep.best_params_"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "K9x19P_Kemy9"
      },
      "source": [
        "The best imputer strategy is `most_frequent` and apparently almost all features are useful (15 out of 16). The last one (`ISLAND`) seems to just add some noise."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "yfz0s1_semy9"
      },
      "source": [
        "Congratulations! You already know quite a lot about Machine Learning. :)"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.10"
    },
    "nav_menu": {
      "height": "279px",
      "width": "309px"
    },
    "toc": {
      "nav_menu": {},
      "number_sections": true,
      "sideBar": true,
      "skip_h1_title": false,
      "toc_cell": false,
      "toc_position": {},
      "toc_section_display": "block",
      "toc_window_display": false
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}